<%- include("../partials/navbar") %>

<div class="justify-center items-center h-screen flex">
    <div class="rounded-lg shadow-lg w-120 border-2 p-8">
        <p class="text-center text-gray-700 mb-4">Verify OTP</p>
        <form id="otpForm" class="space-y-4 text-center">
            <div class="border-2 border-gray-300 rounded-lg p-4 flex justify-center space-x-2">
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
            </div>
            <button type="button" id="submitOtp" class="rounded w-full py-2 mt-4 bg-black text-white">Submit OTP</button>
        </form>
        <p id="timer" class="text-center text-gray-700 mt-4"></p>
        <p class="text-center text-gray-700 mt-4">Didn't receive the OTP?</p>
        <div class="text-center mt-2">
            <button id="resendOtpBtn" class="text-blue-600 hover:text-blue-800 disabled:text-gray-400 disabled:cursor-not-allowed">
                Resend OTP
            </button>
            <span id="resendTimer" class="text-gray-500 ml-2"></span>
        </div>
    </div>
</div>

<%- include("../partials/footer") %>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Function to handle OTP input navigation and validation
    function handleOtpInput(e) {
        const input = e.target;
        const inputs = document.querySelectorAll('.otp-input');
        const currentIndex = Array.from(inputs).indexOf(input);

        // Handle input
        if (e.type === 'input') {
            // Only allow numbers
            input.value = input.value.replace(/[^0-9]/g, '');
            
            // If a number was entered, move to next input
            if (input.value.length === 1 && currentIndex < inputs.length - 1) {
                inputs[currentIndex + 1].focus();
            }
        }

        // Handle arrow keys
        if (e.type === 'keydown') {
            if (e.key === 'ArrowRight' && currentIndex < inputs.length - 1) {
                e.preventDefault();
                inputs[currentIndex + 1].focus();
            } else if (e.key === 'ArrowLeft' && currentIndex > 0) {
                e.preventDefault();
                inputs[currentIndex - 1].focus();
            } else if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('submitOtp').click();
            }
        }

        // Handle backspace
        if (e.type === 'keydown' && e.key === 'Backspace') {
            if (input.value.length === 0 && currentIndex > 0) {
                e.preventDefault();
                inputs[currentIndex - 1].focus();
            }
        }
    }

    // Add event listeners to all OTP inputs
    document.querySelectorAll('.otp-input').forEach(input => {
        input.addEventListener('input', handleOtpInput);
        input.addEventListener('keydown', handleOtpInput);
    });

    // Add enter key handler to submit button
    document.getElementById('submitOtp').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            this.click();
        }
    });

    let otpExpiresAt = new Date('<%= otpExpiresAt %>');
    const timerElement = document.getElementById('timer');
    const resendButton = document.getElementById('resendOtpBtn');
    const resendTimerElement = document.getElementById('resendTimer');
    let timerInterval;
    let resendTimerInterval;

    function updateTimer() {
        const now = new Date();
        const timeLeft = otpExpiresAt - now;
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            timerElement.textContent = 'OTP expired';
            return;
        }
        
        const minutes = Math.floor(timeLeft / 60000);
        const seconds = Math.floor((timeLeft % 60000) / 1000);
        timerElement.textContent = `Time left: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    async function updateResendTimer() {
        try {
            const response = await axios.get('/checkResendTimer');
            if (response.data.success) {
                const { secondsLeft, canResend } = response.data;
                
                if (canResend) {
                    clearInterval(resendTimerInterval);
                    resendButton.disabled = false;
                    resendTimerElement.textContent = '';
                } else {
                    resendButton.disabled = true;
                    resendTimerElement.textContent = `(${secondsLeft}s)`;
                }
            }
        } catch (error) {
            console.error('Error checking resend timer:', error);
        }
    }

    // Check if OTP is already expired on page load
    const now = new Date();
    if (otpExpiresAt <= now) {
        timerElement.textContent = 'OTP expired';
    } else {
        // Start initial timers only if OTP is not expired
        timerInterval = setInterval(updateTimer, 1000);
        resendTimerInterval = setInterval(updateResendTimer, 1000);
        updateTimer();
        updateResendTimer();
    }

    // Handle OTP submission
    document.getElementById('submitOtp').addEventListener('click', async function() {
        const otpInputs = document.querySelectorAll('.otp-input');
        let otp = '';
        otpInputs.forEach(input => {
            otp += input.value;
        });

        // Check if all fields are filled
        if (otp.length !== 6) {
            await Swal.fire({
                icon: 'error',
                title: 'Invalid OTP',
                text: 'Please enter all 6 digits of the OTP',
                confirmButtonColor: '#000'
            });
            return;
        }

        try {
            const response = await axios.post('/verifyOtp', { otp });
            if (response.data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'OTP verified successfully!',
                    confirmButtonColor: '#000'
                });
                window.location.href = '/home';
            }
        } catch (error) {
            const errorMessage = error.response?.data?.message || 'An error occurred during OTP verification';
            
            if (errorMessage.includes('OTP expired')) {
                timerElement.textContent = 'OTP expired';
                await Swal.fire({
                    icon: 'error',
                    title: 'OTP Expired',
                    text: 'Your OTP has expired. Please request a new one.',
                    confirmButtonColor: '#000'
                });
            } else if (errorMessage.includes('Too many attempts')) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Too Many Attempts',
                    text: 'You have exceeded the maximum number of attempts. Please sign up again.',
                    confirmButtonColor: '#000'
                });
                window.location.href = '/signup';
            } else {
                await Swal.fire({
                    icon: 'error',
                    title: 'Invalid OTP',
                    text: errorMessage,
                    confirmButtonColor: '#000'
                });
                // Only clear fields if it's an invalid OTP error
                if (errorMessage.includes('Invalid OTP')) {
                    otpInputs.forEach(input => input.value = '');
                    otpInputs[0].focus();
                }
            }
        }
    });

    // Handle OTP resend
    document.getElementById('resendOtpBtn').addEventListener('click', async function() {
        if (resendButton.disabled) return;

        try {
            // Show loading state
            const loadingAlert = Swal.fire({
                title: 'Sending OTP...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await axios.post('/resendOtp');
            
            // Close loading state
            await loadingAlert.close();
            
            if (response.data.success) {
                // Update OTP expiry time and restart timers
                otpExpiresAt = new Date(response.data.otpExpiresAt);
                clearInterval(timerInterval);
                clearInterval(resendTimerInterval);
                timerInterval = setInterval(updateTimer, 1000);
                resendTimerInterval = setInterval(updateResendTimer, 1000);
                updateTimer();
                updateResendTimer();

                // Show success message
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'New OTP sent successfully!',
                    confirmButtonColor: '#000'
                });
            }
        } catch (error) {
            // Close loading state if it's still open
            if (Swal.isVisible()) {
                await Swal.close();
            }

            console.log(error)
            const errorMessage = error.response?.data?.message || 'Error sending new OTP';
            const secondsLeft = error.response?.data?.secondsLeft;
            
            if (secondsLeft) {
                resendButton.disabled = true;
                resendTimerElement.textContent = `(${secondsLeft}s)`;
                resendTimerInterval = setInterval(updateResendTimer, 1000);
            }
            
            // Show error message
            await Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
                confirmButtonColor: '#000'
            });
           
        }
    });
</script>