<%- include("../partials/navbar") %>

<div class="justify-center items-center h-screen flex">
    <div class="rounded-lg shadow-lg w-120 border-2 p-8">
        <p class="text-center text-gray-700 mb-4">Verify OTP</p>
        <form id="otpForm" class="space-y-4 text-center">
            <div class="border-2 border-gray-300 rounded-lg p-4 flex justify-center space-x-2">
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
                <input type="text" maxlength="1" class="otp-input w-12 h-12 text-center bg-gray-200 text-lg rounded" required/>
            </div>
            <button type="button" id="submitOtp" class="rounded w-full py-2 mt-4 bg-black text-white">Submit OTP</button>
        </form>
        <p id="timer" class="text-center text-gray-700 mt-4"></p>
        <p class="text-center text-gray-700 mt-4">Didn't receive the OTP?</p>
        <div class="text-center mt-2">
            <button id="resendOtpBtn" class="text-blue-600 hover:text-blue-800 disabled:text-gray-400 disabled:cursor-not-allowed">
                Resend OTP
            </button>
            <span id="resendTimer" class="text-gray-500 ml-2"></span>
        </div>
    </div>
</div>

<%- include("../partials/footer") %>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.querySelectorAll('.otp-input').forEach((input, index, inputs) => {
        input.addEventListener('input', () => {
            if (input.value.length === 1 && index < inputs.length - 1) {
                inputs[index + 1].focus();
            }
        });
    });

    const otpExpiresAt = new Date('<%= otpExpiresAt %>');
    const timerElement = document.getElementById('timer');
    const resendButton = document.getElementById('resendOtpBtn');
    const resendTimerElement = document.getElementById('resendTimer');
    let resendTimerInterval;
    let canResend = false;

    function updateTimer() {
        const now = new Date();
        const timeLeft = otpExpiresAt - now;
        
        if (timeLeft <= 0) {
            // Handle OTP expiration
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'OTP expired. Please request a new one.',
                confirmButtonColor: '#000'
            }).then(() => {
                enableResend();
            });
            return;
        }
        
        const minutes = Math.floor(timeLeft / 60000);
        const seconds = Math.floor((timeLeft % 60000) / 1000);
        timerElement.textContent = `Time left: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    function startResendTimer() {
        const twoMinutes = 2 * 60 * 1000;
        const endTime = Date.now() + twoMinutes;
        
        resendButton.disabled = true;
        canResend = false;
        
        clearInterval(resendTimerInterval);
        resendTimerInterval = setInterval(() => {
            const timeLeft = endTime - Date.now();
            
            if (timeLeft <= 0) {
                clearInterval(resendTimerInterval);
                enableResend();
                return;
            }
            
            const seconds = Math.ceil(timeLeft / 1000);
            resendTimerElement.textContent = `(${seconds}s)`;
        }, 1000);
    }

    function enableResend() {
        resendButton.disabled = false;
        canResend = true;
        resendTimerElement.textContent = '';
    }

    // Start initial timers
    setInterval(updateTimer, 1000);
    updateTimer();
    startResendTimer();

    // Handle OTP submission
    document.getElementById('submitOtp').addEventListener('click', async function() {
        const otpInputs = document.querySelectorAll('.otp-input');
        let otp = '';
        otpInputs.forEach(input => {
            otp += input.value;
        });

        try {
            const response = await axios.post('/verifyOtp', { otp });
            if (response.data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'OTP verified successfully!',
                    confirmButtonColor: '#000'
                });
                window.location.href = '/home';
            }
        } catch (error) {
            const errorMessage = error.response?.data?.message || 'An error occurred during OTP verification';
            await Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
                confirmButtonColor: '#000'
            }).then(() => {
                if (errorMessage.includes('Too many attempts')) {
                    window.location.href = '/signup';
                } else {
                    otpInputs.forEach(input => input.value = '');
                    otpInputs[0].focus();
                }
            });
        }
    });

    // Handle OTP resend
    document.getElementById('resendOtpBtn').addEventListener('click', async function() {
        if (!canResend) return;

        try {
            const response = await axios.post('/resendOtp');
            
            if (response.data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'New OTP sent successfully!',
                    confirmButtonColor: '#000'
                });
                
                // Update OTP expiry time and restart timers
                otpExpiresAt = new Date(response.data.otpExpiresAt);
                startResendTimer();
            }
        } catch (error) {
            const errorMessage = error.response?.data?.message || 'Error sending new OTP';
            await Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
                confirmButtonColor: '#000'
            });
        }
    });
</script>