<%- include('../partials/navbar') %>

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar -->
        <div class="lg:w-1/4">
            <%- include('../partials/profileSidebar') %>
        </div>

        <!-- Main Content -->
        <div class="lg:w-3/4">
            <h1 class="text-2xl font-bold mb-6">Checkout</h1>

            <!-- Shipping Address Section -->
            <div class="bg-white p-4 rounded-lg shadow-md mb-6">
                <div class="flex justify-between items-center mb-3">
                    <h2 class="text-xl font-semibold">Shipping Address</h2>
                    <a href="/address" class="text-blue-600 hover:text-blue-800 text-sm">
                        Add New Address
                    </a>
                </div>

                <div class="space-y-3">
                    <% if (addresses && addresses.length > 0) { %>
                        <% addresses.forEach(address => { %>
                            <div class="border rounded-lg p-3 hover:border-black transition-colors">
                                <label class="flex items-start gap-3 cursor-pointer">
                                    <input type="radio" 
                                           name="selectedAddress" 
                                           value="<%= address._id %>"
                                           class="mt-1"
                                           required>
                                    <div class="text-sm">
                                        <p class="font-semibold"><%= address.name %></p>
                                        <p class="text-gray-600">
                                            <%= address.houseName %>, 
                                            <%= address.localityStreet %>, 
                                            <%= address.city %>, 
                                            <%= address.state %> - <%= address.pincode %>
                                        </p>
                                        <p class="text-gray-600">
                                            Ph: <%= address.phone %>
                                            <% if (address.alternatePhone) { %>
                                                | Alt: <%= address.alternatePhone %>
                                            <% } %>
                                        </p>
                                    </div>
                                </label>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p class="text-center text-gray-600 text-sm py-2">
                            No addresses found. Please add a delivery address.
                        </p>
                    <% } %>
                </div>
            </div>

            <div class="flex flex-col md:flex-row gap-8">
                <!-- Order Items -->
                <div class="md:w-2/3">
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h2 class="text-xl font-semibold mb-4">Order Items</h2>
                        <div class="space-y-4">
                            <% cartItems.forEach((item, index) => { %>
                                <div class="flex gap-4 border-b pb-4">
                                    <img src="<%= item.productId.images[0].path %>" 
                                         alt="<%= item.productId.name %>"
                                         class="w-20 h-20 object-cover rounded">
                                    <div class="flex-grow">
                                        <h3 class="font-semibold"><%= item.productId.name %></h3>
                                        <p class="text-gray-600">Brand: <%= item.productId.brand %></p>
                                        <p class="text-gray-600">Variant: <%= item.variantType %></p>
                                        <div class="mt-2">
                                            <p class="text-sm text-gray-500 line-through">
                                                ₹<%= item.originalPrice.toFixed(2) %>
                                            </p>
                                            <% if (item.offer) { %>
                                                <p class="text-sm text-green-600">
                                                    <%= item.offer.discount %>% off - <%= item.offer.name %>
                                                    (<%= item.offer.type === 'product' ? 'Product Offer' : 'Category Offer' %>)
                                                </p>
                                            <% } %>
                                            <p class="font-semibold">
                                                ₹<%= item.discountedPrice.toFixed(2) %> x <%= item.quantity %>
                                            </p>
                                            <p class="text-sm font-semibold text-gray-800">
                                                Total: ₹<%= item.totalPrice.toFixed(2) %>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="md:w-1/3">
                    <div class="bg-white p-6 rounded-lg shadow-md sticky top-4">
                        <!-- Coupon Section -->
                        <div class="mb-6 border-b pb-4">
                            <h3 class="font-semibold mb-2">Apply Coupon</h3>
                            <% if (coupons && coupons.length > 0) { %>
                                <select id="couponSelect" class="w-full p-2 border rounded mb-2">
                                    <option value="">Select a coupon</option>
                                    <% coupons.forEach(coupon => { %>
                                        <option value="<%= coupon._id %>" 
                                                data-type="<%= coupon.discountType %>"
                                                data-value="<%= coupon.discountValue %>"
                                                data-max="<%= coupon.maxDiscount %>">
                                            <%= coupon.code %> - 
                                            <%= coupon.discountType === 'PERCENTAGE' ? 
                                                `${coupon.discountValue}% off` : 
                                                `₹${coupon.discountValue} off` %>
                                            <% if (coupon.maxDiscount) { %>
                                                (Max: ₹<%= coupon.maxDiscount %>)
                                            <% } %>
                                        </option>
                                    <% }); %>
                                </select>
                                <button onclick="applyCoupon()" 
                                        class="w-full bg-gray-800 text-white py-2 rounded hover:bg-gray-700">
                                    Apply Coupon
                                </button>
                                <div id="removeCouponButton" class="hidden">
                                    <button onclick="removeCoupon()" 
                                            class="w-full mt-2 bg-red-600 text-white py-2 rounded hover:bg-red-700">
                                        Remove Coupon
                                    </button>
                                </div>
                            <% } else { %>
                                <p class="text-sm text-gray-600">No coupons available for this order</p>
                            <% } %>
                        </div>

                        <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
                        <div class="space-y-3">
                            <div class="flex justify-between">
                                <span>Original Subtotal</span>
                                <span>₹<%= originalSubtotal.toFixed(2) %></span>
                            </div>

                            <% if (totalOfferDiscount > 0) { %>
                                <div class="flex justify-between text-green-600">
                                    <span>Offer Discount</span>
                                    <span>-₹<%= totalOfferDiscount.toFixed(2) %></span>
                                </div>
                            <% } %>

                            <div class="flex justify-between">
                                <span>Subtotal After Offer</span>
                                <span>₹<span id="subtotalAfterOffer"><%= subtotal.toFixed(2) %></span></span>
                            </div>

                            <!-- Coupon Discount Row (Hidden by default) -->
                            <div id="couponDiscountRow" class="flex justify-between text-green-600 hidden">
                                <span>Coupon Discount</span>
                                <span>-₹<span id="couponDiscountAmount">0.00</span></span>
                            </div>

                            <!-- Subtotal After Coupon (Hidden by default) -->
                            <div id="subtotalAfterCouponRow" class="flex justify-between hidden">
                                <span>Subtotal After Coupon</span>
                                <span>₹<span id="subtotalAfterCoupon">0.00</span></span>
                            </div>

                            <div class="flex justify-between">
                                <span>GST (18% of subtotal)</span>
                                <span>₹<span id="gstAmount"><%= Math.round(subtotal * 0.18).toFixed(2) %></span></span>
                            </div>

                            <div class="flex justify-between">
                                <span>Shipping (2% of subtotal)</span>
                                <span>₹<span id="shippingCost"><%= shippingCost.toFixed(2) %></span></span>
                            </div>

                            <div class="border-t pt-3">
                                <div class="flex justify-between font-bold">
                                    <span>Total</span>
                                    <span>₹<span id="finalTotal"><%= (subtotal + Math.round(subtotal * 0.18) + shippingCost).toFixed(2) %></span></span>
                                </div>
                            </div>
                        </div>

                        <!-- Payment Method Selection -->
                        <div class="mt-6">
                            <h3 class="font-semibold mb-3">Payment Method</h3>
                            <div class="space-y-2">
                                <label class="flex items-center gap-2" id="codPaymentLabel">
                                    <input type="radio" name="paymentMethod" value="cod" checked id="codPayment">
                                    <span>Cash on Delivery</span>
                                </label>
                                <label class="flex items-center gap-2">
                                    <input type="radio" name="paymentMethod" value="online">
                                    <span>Online Payment</span>
                                </label>
                                <label class="flex items-center gap-2" id="walletPaymentLabel">
                                    <input type="radio" name="paymentMethod" value="wallet" 
                                           id="walletPayment" 
                                           <%= walletBalance < (subtotal + Math.round(subtotal * 0.18) + shippingCost) ? 'disabled' : '' %>>
                                    <div>
                                        <span>Wallet</span>
                                        <p class="text-sm <%= walletBalance >= (subtotal + Math.round(subtotal * 0.18) + shippingCost) ? 'text-green-600' : 'text-red-600' %>">
                                            Balance: ₹<%= walletBalance.toFixed(2) %>
                                            <% if (walletBalance < (subtotal + Math.round(subtotal * 0.18) + shippingCost)) { %>
                                                (Insufficient balance)
                                            <% } %>
                                        </p>
                                    </div>
                                </label>
                            </div>
                        </div>

                        <!-- Place Order Button -->
                        <button id="placeOrderButton"
                                class="w-full mt-6 bg-black text-white py-3 rounded-lg hover:bg-gray-800 transition-colors">
                            <span id="buttonText">Place Order</span>
                            <span id="buttonSpinner" class="hidden">
                                <i class="fas fa-spinner fa-spin"></i>
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
let appliedCoupon = null;
let rzpInstance = null;

// Function to calculate all amounts
function calculateAmounts(subtotal, offerDiscount = 0, couponDiscount = 0) {
    // Original subtotal is the sum of original product prices
    const originalSubtotal = subtotal;
    
    // Calculate subtotal after offers (this should remain constant)
    const subtotalAfterOffers = originalSubtotal - offerDiscount;
    
    // Calculate subtotal after coupon by deducting coupon discount from subtotal after offers
    const subtotalAfterCoupon = subtotalAfterOffers - couponDiscount;

    // Calculate GST and shipping based on subtotal after coupon
    const totalGstAmount = Math.round(subtotalAfterCoupon * 0.18); // 18% GST
    const totalShippingCost = Math.round(subtotalAfterCoupon * 0.02); // 2% Shipping

    // Calculate final total
    const finalTotal = subtotalAfterCoupon + totalGstAmount + totalShippingCost;

    return {
        originalSubtotal,
        subtotalAfterOffers,
        subtotalAfterCoupon,
        gstAmount: totalGstAmount,
        shippingCost: totalShippingCost,
        finalTotal
    };
}

// Function to update displayed amounts
function updateDisplayedAmounts(amounts) {
    // Keep subtotal after offer constant
    const subtotalAfterOfferElement = document.getElementById('subtotalAfterOffer');
    if (subtotalAfterOfferElement) {
        subtotalAfterOfferElement.textContent = '<%= subtotal.toFixed(2) %>';
    }

    // Update subtotal after coupon by deducting coupon discount from subtotal after offer
    const subtotalAfterCouponElement = document.getElementById('subtotalAfterCoupon');
    if (subtotalAfterCouponElement) {
        const subtotalAfterOffer = parseFloat('<%= subtotal %>');
        const couponDiscount = parseFloat(document.getElementById('couponDiscountAmount').textContent || '0');
        const subtotalAfterCoupon = subtotalAfterOffer - couponDiscount;
        subtotalAfterCouponElement.textContent = subtotalAfterCoupon.toFixed(2);

        // Calculate GST and shipping based on subtotal after coupon
        const gstAmount = Math.round(subtotalAfterCoupon * 0.18); // 18% GST
        const shippingCost = Math.round(subtotalAfterCoupon * 0.02); // 2% Shipping
        const finalTotal = subtotalAfterCoupon + gstAmount + shippingCost;

        // Update GST amount
        const gstAmountElement = document.getElementById('gstAmount');
        if (gstAmountElement) {
            gstAmountElement.textContent = gstAmount.toFixed(2);
        }

        // Update shipping cost
        const shippingCostElement = document.getElementById('shippingCost');
        if (shippingCostElement) {
            shippingCostElement.textContent = shippingCost.toFixed(2);
        }

        // Update final total
        const finalTotalElement = document.getElementById('finalTotal');
        if (finalTotalElement) {
            finalTotalElement.textContent = finalTotal.toFixed(2);
        }
    }
}

// Update the cart items data to include correct calculations
const cartItemsData = <%- JSON.stringify(cartItems.map(item => {
    // Get the original price from the product model
    const variant = item.productId.variants.find(v => v.type === item.variantType);
    const originalPrice = variant ? variant.price : 0;
    const priceAfterOffer = item.priceAfterOffer;
    const offerDiscount = originalPrice - priceAfterOffer;
    
    // Calculate GST and shipping for this item
    const itemGstAmount = Math.round(priceAfterOffer * 0.18);
    const itemShippingCost = Math.round(priceAfterOffer * 0.02);
    
    return {
        productId: item.productId._id,
        name: item.productId.name,
        brand: item.productId.brand,
        category: item.productId.category ? item.productId.category.name || "Category" : "Category",
        images: item.productId.images.map(img => ({ path: img.path, filename: img.filename })),
        quantity: Number(item.quantity),
        originalPrice: Number(originalPrice),
        variantType: item.variantType,
        status: 'pending',
        priceAfterOffer: Number(priceAfterOffer),
        offerDiscount: Number(offerDiscount),
        subtotalforproduct: Number(originalPrice * item.quantity),
        finalPrice: Number(priceAfterOffer),
        finalAmount: Number(priceAfterOffer * item.quantity),
        gstAmount: Number(itemGstAmount * item.quantity),
        shippingCost: Number(itemShippingCost * item.quantity),
        couponDiscount: 0,
        couponForProduct: null,
        offer: item.offer ? {
            name: item.offer.name || '',
            type: item.offer.type || 'product',
            discount: Number(item.offer.discount || 0)
        } : null
    };
})) %>;

async function applyCoupon() {
    try {
        const select = document.getElementById('couponSelect');
        const option = select.options[select.selectedIndex];

        if (!option.value) {
            throw new Error('Please select a coupon');
        }

        // Get original amounts
        const subtotalValue = parseFloat('<%= subtotal %>');
        const offerDiscountValue = parseFloat('<%= totalOfferDiscount %>');

        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                couponId: option.value,
                subtotal: subtotalValue,
                items: cartItemsData
            })
        });

        const data = await response.json();

        if (data.success) {
            // Show coupon discount and subtotal after coupon
            document.getElementById('couponDiscountRow').classList.remove('hidden');
            document.getElementById('subtotalAfterCouponRow').classList.remove('hidden');
            document.getElementById('couponDiscountAmount').textContent = 
                data.discount.toFixed(2);

            // Show remove coupon button
            document.getElementById('removeCouponButton').classList.remove('hidden');

            // Calculate all amounts with the new coupon discount
            const amounts = calculateAmounts(subtotalValue, offerDiscountValue, data.discount);
            
            // Update displayed amounts
            updateDisplayedAmounts(amounts);

            // Store applied coupon with all details
            appliedCoupon = {
                id: option.value,
                code: option.textContent.split(' - ')[0],
                discount: data.discount
            };

            // Update payment options based on new total
            updatePaymentOptions();

            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied',
                text: `Discount of ₹${data.discount.toFixed(2)} applied successfully!`
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to apply coupon'
        });
    }
}

// Update the removeCoupon function to reset to original values
function removeCoupon() {
    // Hide coupon discount row and subtotal after coupon row
    document.getElementById('couponDiscountRow').classList.add('hidden');
    document.getElementById('subtotalAfterCouponRow').classList.add('hidden');
    // Hide remove coupon button
    document.getElementById('removeCouponButton').classList.add('hidden');
    
    // Reset coupon discount
    document.getElementById('couponDiscountAmount').textContent = '0.00';
    
    // Get original amounts
    const originalSubtotal = parseFloat('<%= subtotal %>');
    const offerDiscount = parseFloat('<%= totalOfferDiscount %>');
    
    // Calculate all amounts without coupon
    const amounts = calculateAmounts(originalSubtotal, offerDiscount, 0);
    
    // Update displayed amounts
    updateDisplayedAmounts(amounts);
    
    // Clear applied coupon
    appliedCoupon = null;
    
    // Reset coupon select
    document.getElementById('couponSelect').value = '';

    // Update payment options based on new total
    updatePaymentOptions();
}

// Add this function at the top of the script section
function showError(message) {
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: message,
        confirmButtonText: 'OK'
    });
}

// Update the placeOrder function
async function placeOrder() {
    try {
        // Validate address
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        if (!selectedAddress) {
            showError('Please select a shipping address');
            return;
        }

        // Validate payment method
        const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedPayment) {
            showError('Please select a payment method');
            return;
        }

        const paymentMethod = selectedPayment.value;
        
        // Validate wallet balance if using wallet
        if (paymentMethod === 'wallet') {
            const walletBalance = parseFloat('<%= walletBalance %>');
            const totalAmount = parseFloat(document.getElementById('finalTotal').textContent);
            if (walletBalance < totalAmount) {
                showError('Insufficient wallet balance');
                return;
            }
        }

        // Validate total amount for online payment
        if (paymentMethod === 'online') {
            const totalAmount = parseFloat(document.getElementById('finalTotal').textContent);
            if (totalAmount < 1) {
                showError('Minimum order amount for online payment is ₹1');
                return;
            }
        }

        // Process cart items
        const processedItems = JSON.parse(JSON.stringify(cartItemsData));
        
        // Validate processed items
        if (!Array.isArray(processedItems) || processedItems.length === 0) {
            throw new Error('Cart is empty');
        }

        // Get coupon data if applied
        let couponData = null;
        if (appliedCoupon) {
            const couponSelect = document.getElementById('couponSelect');
            const selectedOption = couponSelect.options[couponSelect.selectedIndex];
            couponData = {
                id: appliedCoupon.id,
                code: appliedCoupon.code,
                type: selectedOption.dataset.type,
                value: parseFloat(selectedOption.dataset.value),
                maxDiscount: selectedOption.dataset.max ? parseFloat(selectedOption.dataset.max) : null,
                discount: appliedCoupon.discount
            };
        }

        // Prepare form data
        const formData = {
            addressId: selectedAddress.value,
            paymentMethod: paymentMethod,
            coupon: couponData,
            items: processedItems,
            totalAmount: Number(document.getElementById('finalTotal').textContent),
            originalSubtotal: Number('<%= originalSubtotal %>'),
            totalOfferDiscount: Number('<%= totalOfferDiscount %>'),
            totalCouponDiscount: Number(document.getElementById('couponDiscountAmount').textContent || '0'),
            subtotal: Number('<%= subtotal %>'),
            gstAmount: Number(document.getElementById('gstAmount').textContent),
            shippingCost: Number(document.getElementById('shippingCost').textContent)
        };

        // Log the request data
        console.log('Sending order data:', JSON.stringify(formData, null, 2));

        // Show loading state
        const placeOrderBtn = document.getElementById('placeOrderButton');
        placeOrderBtn.disabled = true;
        placeOrderBtn.querySelector('#buttonText').textContent = 'Processing...';
        placeOrderBtn.querySelector('#buttonSpinner').classList.remove('hidden');

        // Send order data to server
        const response = await fetch('/order/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify(formData)
        });

        // Log the response status
        console.log('Response status:', response.status);

        const responseData = await response.json();
        
        // Log the response data
        console.log('Response data:', responseData);

        if (!response.ok) {
            throw new Error(responseData.message || 'Error creating order');
        }

        // Handle different payment methods
        if (paymentMethod === 'online' && responseData.razorpayOrder) {
            // Initialize Razorpay
            const options = {
                key: responseData.razorpayOrder.key,
                amount: responseData.razorpayOrder.amount,
                currency: responseData.razorpayOrder.currency,
                name: responseData.razorpayOrder.name,
                description: responseData.razorpayOrder.description,
                order_id: responseData.razorpayOrder.id,
                handler: async function(response) {
                    try {
                        // Verify payment with server
                        const verifyResponse = await fetch('/order/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            credentials: 'include',
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature
                            })
                        });

                        const verifyData = await verifyResponse.json();
                        window.location.href = verifyData.redirect;
                    } catch (error) {
                        console.error('Payment verification error:', error);
                        showError(error.message || 'Error verifying payment');
                        resetButtonState();
                    }
                },
                modal: {
                    ondismiss: async function() {
                        try {
                            // When modal is dismissed, verify payment with empty signature
                            const verifyResponse = await fetch('/order/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                credentials: 'include',
                                body: JSON.stringify({
                                    razorpay_order_id: responseData.razorpayOrder.id,
                                    razorpay_payment_id: '',
                                    razorpay_signature: ''
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            
                            // Show payment cancelled notification
                            Swal.fire({
                                icon: 'info',
                                title: 'Payment Cancelled',
                                text: 'Your order has been saved with pending payment status. You can retry the payment later.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = verifyData.redirect;
                            });
                        } catch (error) {
                            console.error('Error handling modal dismissal:', error);
                            showError('Error processing your request. Please try again.');
                            resetButtonState();
                        }
                    }
                },
                prefill: responseData.razorpayOrder.prefill,
                theme: responseData.razorpayOrder.theme
            };

            // Create new Razorpay instance
            rzpInstance = new Razorpay(options);

            // Add event listeners
            rzpInstance.on('payment.failed', async function(response) {
                try {
                    // Verify payment with server even for failed payments
                    const verifyResponse = await fetch('/order/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            razorpay_order_id: responseData.razorpayOrder.id,
                            razorpay_payment_id: response.error.metadata.payment_id || '',
                            razorpay_signature: ''
                        })
                    });

                    const verifyData = await verifyResponse.json();
                    window.location.href = verifyData.redirect;
                } catch (error) {
                    console.error('Payment failed error:', error);
                    showError('Error processing failed payment. Please try again.');
                    resetButtonState();
                }
            });

            // Open the payment modal
            rzpInstance.open();
        } else {
            // For other payment methods, redirect to success page
            window.location.href = responseData.redirect;
        }

    } catch (error) {
        console.error('Order creation error:', error);
        showError(error.message || 'Error creating order. Please try again.');
        resetButtonState();
    }
}

// Add helper function to reset button state
function resetButtonState() {
    const placeOrderBtn = document.getElementById('placeOrderButton');
    placeOrderBtn.disabled = false;
    placeOrderBtn.querySelector('#buttonText').textContent = 'Place Order';
    placeOrderBtn.querySelector('#buttonSpinner').classList.add('hidden');
}

// Ensure the event listener is added after the DOM is fully loaded
document.addEventListener('DOMContentLoaded', () => {
    const placeOrderButton = document.getElementById('placeOrderButton');
    if (placeOrderButton) {
        placeOrderButton.addEventListener('click', placeOrder);
    } else {
        console.error('Place Order button not found');
    }
    
    // Initialize amounts
    const originalSubtotal = parseFloat('<%= originalSubtotal %>');
    const offerDiscount = parseFloat('<%= totalOfferDiscount %>');
    const amounts = calculateAmounts(originalSubtotal, offerDiscount, 0);
    updateDisplayedAmounts(amounts);
    updatePaymentOptions();

    // Add this to ensure Razorpay script is loaded
    if (typeof Razorpay === 'undefined') {
        console.error('Razorpay script not loaded');
        // You might want to show an error message to the user
    }
});

// Update payment options when total changes
function updatePaymentOptions() {
    const currentTotal = parseFloat(document.getElementById('finalTotal').textContent);
    const walletBalance = parseFloat('<%= walletBalance %>');
    const walletPayment = document.getElementById('walletPayment');
    const walletPaymentLabel = document.getElementById('walletPaymentLabel');
    const codPayment = document.getElementById('codPayment');
    const codPaymentLabel = document.getElementById('codPaymentLabel');

    // Disable COD if total is above 2000
    if (currentTotal > 2000) {
        codPayment.disabled = true;
        codPaymentLabel.classList.add('opacity-50');
        if (codPayment.checked) {
            document.querySelector('input[name="paymentMethod"][value="online"]').checked = true;
        }
    } else {
        codPayment.disabled = false;
        codPaymentLabel.classList.remove('opacity-50');
    }

    if (walletBalance < currentTotal) {
        walletPayment.disabled = true;
        walletPayment.checked = false;
        walletPaymentLabel.classList.add('opacity-50');
    } else {
        walletPayment.disabled = false;
        walletPaymentLabel.classList.remove('opacity-50');
    }
}
</script>

<%- include('../partials/footer') %>

