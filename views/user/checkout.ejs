<%- include('../partials/navbar') %>

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar -->
        <div class="lg:w-1/4">
            <%- include('../partials/profileSidebar') %>
        </div>

        <!-- Main Content -->
        <div class="lg:w-3/4">
            <h1 class="text-2xl font-bold mb-6">Checkout</h1>

            <!-- Shipping Address Section -->
            <div class="bg-white p-4 rounded-lg shadow-md mb-6">
                <div class="flex justify-between items-center mb-3">
                    <h2 class="text-xl font-semibold">Shipping Address</h2>
                    <a href="/address" class="text-blue-600 hover:text-blue-800 text-sm">
                        Add New Address
                    </a>
                </div>

                <div class="space-y-3">
                    <% if (addresses && addresses.length > 0) { %>
                        <% addresses.forEach(address => { %>
                            <div class="border rounded-lg p-3 hover:border-black transition-colors">
                                <label class="flex items-start gap-3 cursor-pointer">
                                    <input type="radio" 
                                           name="selectedAddress" 
                                           value="<%= address._id %>"
                                           class="mt-1"
                                           required>
                                    <div class="text-sm">
                                        <p class="font-semibold"><%= address.name %></p>
                                        <p class="text-gray-600">
                                            <%= address.houseName %>, 
                                            <%= address.localityStreet %>, 
                                            <%= address.city %>, 
                                            <%= address.state %> - <%= address.pincode %>
                                        </p>
                                        <p class="text-gray-600">
                                            Ph: <%= address.phone %>
                                            <% if (address.alternatePhone) { %>
                                                | Alt: <%= address.alternatePhone %>
                                            <% } %>
                                        </p>
                                    </div>
                                </label>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p class="text-center text-gray-600 text-sm py-2">
                            No addresses found. Please add a delivery address.
                        </p>
                    <% } %>
                </div>
            </div>

            <div class="flex flex-col md:flex-row gap-8">
                <!-- Order Items -->
                <div class="md:w-2/3">
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h2 class="text-xl font-semibold mb-4">Order Items</h2>
                        <div class="space-y-4">
                            <% cartItems.forEach((item, index) => { %>
                                <div class="flex gap-4 border-b pb-4">
                                    <img src="<%= item.productId.images[0].path %>" 
                                         alt="<%= item.productId.name %>"
                                         class="w-20 h-20 object-cover rounded">
                                    <div class="flex-grow">
                                        <h3 class="font-semibold"><%= item.productId.name %></h3>
                                        <p class="text-gray-600">Brand: <%= item.productId.brand %></p>
                                        <p class="text-gray-600">Variant: <%= item.variantType %></p>
                                        <div class="mt-2">
                                            <p class="text-sm text-gray-500 line-through">
                                                ₹<%= item.originalPrice.toFixed(2) %>
                                            </p>
                                            <% if (item.offer) { %>
                                                <p class="text-sm text-green-600">
                                                    <%= item.offer.discount %>% off - <%= item.offer.name %>
                                                    (<%= item.offer.type === 'product' ? 'Product Offer' : 'Category Offer' %>)
                                                </p>
                                            <% } %>
                                            <p class="font-semibold">
                                                ₹<%= item.discountedPrice.toFixed(2) %> x <%= item.quantity %>
                                            </p>
                                            <p class="text-sm font-semibold text-gray-800">
                                                Total: ₹<%= item.totalPrice.toFixed(2) %>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="md:w-1/3">
                    <div class="bg-white p-6 rounded-lg shadow-md sticky top-4">
                        <!-- Coupon Section -->
                        <div class="mb-6 border-b pb-4">
                            <h3 class="font-semibold mb-2">Apply Coupon</h3>
                            <% if (coupons && coupons.length > 0) { %>
                                <select id="couponSelect" class="w-full p-2 border rounded mb-2">
                                    <option value="">Select a coupon</option>
                                    <% coupons.forEach(coupon => { %>
                                        <option value="<%= coupon._id %>" 
                                                data-type="<%= coupon.discountType %>"
                                                data-value="<%= coupon.discountValue %>"
                                                data-max="<%= coupon.maxDiscount %>">
                                            <%= coupon.code %> - 
                                            <%= coupon.discountType === 'PERCENTAGE' ? 
                                                `${coupon.discountValue}% off` : 
                                                `₹${coupon.discountValue} off` %>
                                            <% if (coupon.maxDiscount) { %>
                                                (Max: ₹<%= coupon.maxDiscount %>)
                                            <% } %>
                                        </option>
                                    <% }); %>
                                </select>
                                <button onclick="applyCoupon()" 
                                        class="w-full bg-gray-800 text-white py-2 rounded hover:bg-gray-700">
                                    Apply Coupon
                                </button>
                            <% } else { %>
                                <p class="text-sm text-gray-600">No coupons available for this order</p>
                            <% } %>
                        </div>

                        <!-- Order Summary Section -->
                        <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
                        <div class="space-y-3">
                            <div class="flex justify-between">
                                <span>Subtotal</span>
                                <span>₹<%= subtotal.toFixed(2) %></span>
                            </div>

                            <% if (totalOfferDiscount > 0) { %>
                                <div class="flex justify-between text-green-600">
                                    <span>Offer Discount</span>
                                    <span>-₹<%= totalOfferDiscount.toFixed(2) %></span>
                                </div>
                            <% } %>

                            <!-- Coupon Discount Row (Hidden by default) -->
                            <div id="couponDiscountRow" class="flex justify-between text-green-600 hidden">
                                <span>Coupon Discount</span>
                                <span>-₹<span id="couponDiscountAmount">0.00</span></span>
                            </div>

                            <div class="flex justify-between text-gray-600">
                                <span>GST (18%)</span>
                                <span>₹<span id="gstAmount"><%= gstAmount.toFixed(2) %></span></span>
                            </div>

                            <div class="flex justify-between">
                                <span>Shipping (2%)</span>
                                <span>₹<span id="shippingCost"><%= shippingCost.toFixed(2) %></span></span>
                            </div>

                            <div class="border-t pt-3">
                                <div class="flex justify-between font-bold">
                                    <span>Total</span>
                                    <span>₹<span id="finalTotal"><%= total.toFixed(2) %></span></span>
                                </div>
                            </div>
                        </div>

                        <!-- Payment Method Selection -->
                        <div class="mt-6">
                            <h3 class="font-semibold mb-3">Payment Method</h3>
                            <div class="space-y-2">
                                <label class="flex items-center gap-2" id="codPaymentLabel">
                                    <input type="radio" name="paymentMethod" value="cod" checked id="codPayment">
                                    <span>Cash on Delivery</span>
                                </label>
                                <label class="flex items-center gap-2">
                                    <input type="radio" name="paymentMethod" value="online">
                                    <span>Online Payment</span>
                                </label>
                                <label class="flex items-center gap-2" id="walletPaymentLabel">
                                    <input type="radio" name="paymentMethod" value="wallet" 
                                           id="walletPayment" 
                                           <%= walletBalance < total ? 'disabled' : '' %>>
                                    <div>
                                        <span>Wallet</span>
                                        <p class="text-sm <%= walletBalance >= total ? 'text-green-600' : 'text-red-600' %>">
                                            Balance: ₹<%= walletBalance.toFixed(2) %>
                                            <% if (walletBalance < total) { %>
                                                (Insufficient balance)
                                            <% } %>
                                        </p>
                                    </div>
                                </label>
                            </div>
                        </div>

                        <!-- Place Order Button -->
                        <button id="placeOrderButton"
                                class="w-full mt-6 bg-black text-white py-3 rounded-lg hover:bg-gray-800 transition-colors">
                            Place Order
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
let appliedCoupon = null;

// Get the pre-calculated data from the server as a plain JSON string
const cartItemsData = <%- JSON.stringify(cartItems.map(item => {
    // Simple properties that are guaranteed to be available
    return {
        productId: item.productId._id,
        name: item.productId.name,
        brand: item.productId.brand,
        category: item.productId.category ? item.productId.category.name || "Category" : "Category",
        images: item.productId.images,
        quantity: item.quantity,
        originalPrice: item.originalPrice,
        variantType: item.variantType,
        status: 'pending',
        previousStatus: 'pending',
        priceAfterOffer: item.discountedPrice,
        offerDiscount: item.originalPrice - item.discountedPrice,
        subtotalforproduct: item.totalPrice,
        gstAmount: Math.round(item.totalPrice * 0.18),
        shippingCost: Math.round(item.totalPrice * 0.02),
        finalPrice: item.discountedPrice,
        finalAmount: item.totalPrice,
        couponDiscount: 0,
        couponForProduct: null,
        offer: item.offer ? {
            name: item.offer.name || '',
            type: item.offer.type || 'product',
            discount: item.offer.discount || 0
        } : null
    };
})) %>;

// Function to calculate all amounts
function calculateAmounts(subtotal, offerDiscount = 0, couponDiscount = 0) {
    // Calculate subtotal after offers and coupons
    const subtotalAfterOffers = subtotal - offerDiscount;
    const subtotalAfterCoupon = subtotalAfterOffers - couponDiscount;

    // Calculate GST (18% of subtotal after all discounts)
    const gstAmount = Math.round(subtotalAfterCoupon * 0.18);

    // Calculate shipping (2% of subtotal after all discounts)
    const shippingCost = subtotalAfterCoupon > 0 ? Math.round(subtotalAfterCoupon * 0.02) : 0;

    // Calculate final total
    const finalTotal = subtotalAfterCoupon + gstAmount + shippingCost;

    return {
        originalSubtotal: subtotal,
        subtotalAfterOffers,
        subtotalAfterCoupon,
        gstAmount,
        shippingCost,
        finalTotal
    };
}

// Function to update displayed amounts
function updateDisplayedAmounts(amounts) {
    document.getElementById('gstAmount').textContent = amounts.gstAmount.toFixed(2);
    document.getElementById('shippingCost').textContent = amounts.shippingCost.toFixed(2);
    document.getElementById('finalTotal').textContent = amounts.finalTotal.toFixed(2);
}

async function applyCoupon() {
    try {
        const select = document.getElementById('couponSelect');
        const option = select.options[select.selectedIndex];

        if (!option.value) {
            throw new Error('Please select a coupon');
        }

        // Get original amounts
        const subtotalValue = parseFloat('<%= subtotal %>');
        const offerDiscountValue = parseFloat('<%= totalOfferDiscount %>');

        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                couponId: option.value,
                subtotal: subtotalValue,
                items: cartItemsData
            })
        });

        const data = await response.json();

        if (data.success) {
            // Show coupon discount
            document.getElementById('couponDiscountRow').classList.remove('hidden');
            document.getElementById('couponDiscountAmount').textContent = 
                data.discount.toFixed(2);

            // Calculate all amounts with the new coupon discount
            const amounts = calculateAmounts(subtotalValue, offerDiscountValue, data.discount);
            
            // Update displayed amounts
            updateDisplayedAmounts(amounts);

            // Store applied coupon with all details
            appliedCoupon = {
                id: option.value,
                code: option.textContent.split(' - ')[0],
                discount: data.discount
            };

            // Update payment options based on new total
            updatePaymentOptions();

            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied',
                text: `Discount of ₹${data.discount.toFixed(2)} applied successfully!`
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to apply coupon'
        });
    }
}

// Function to remove coupon and recalculate amounts
function removeCoupon() {
    // Hide coupon discount row
    document.getElementById('couponDiscountRow').classList.add('hidden');
    
    // Reset coupon discount
    document.getElementById('couponDiscountAmount').textContent = '0.00';
    
    // Get original amounts
    const originalSubtotal = parseFloat('<%= subtotal %>');
    const offerDiscount = parseFloat('<%= totalOfferDiscount %>');
    
    // Calculate all amounts without coupon
    const amounts = calculateAmounts(originalSubtotal, offerDiscount, 0);
    
    // Update displayed amounts
    updateDisplayedAmounts(amounts);
    
    // Clear applied coupon
    appliedCoupon = null;
    
    // Reset coupon select
    document.getElementById('couponSelect').value = '';

    // Update payment options based on new total
    updatePaymentOptions();
}

async function placeOrder(event) {
    event.preventDefault();
    
    // Check if address is selected
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please select a delivery address'
        });
        return;
    }

    // Check if payment method is selected
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    if (!selectedPayment) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please select a payment method'
        });
        return;
    }
    
    // Get the current total amount from the UI
    const currentTotal = parseFloat(document.getElementById('finalTotal').textContent);
    
    // Check wallet balance if wallet payment is selected
    if (selectedPayment.value === 'wallet') {
        const walletBalance = parseFloat('<%= walletBalance %>');
        if (walletBalance < currentTotal) {
            Swal.fire({
                icon: 'error',
                title: 'Insufficient Balance',
                text: 'Your wallet balance is insufficient for this purchase.'
            });
            return;
        }
    }

    // Deep clone the cart items to avoid reference issues
    const processedItems = JSON.parse(JSON.stringify(cartItemsData));

    // If coupon is applied, update each item with the coupon discount
    if (appliedCoupon) {
        const couponDiscountAmount = parseFloat(document.getElementById('couponDiscountAmount').textContent || '0');
        const subtotalValue = parseFloat('<%= subtotal %>');
        
        processedItems.forEach(item => {
            const proportion = item.subtotalforproduct / subtotalValue;
            const itemCouponDiscount = couponDiscountAmount * proportion;
            
            item.couponForProduct = {
                code: appliedCoupon.code,
                discount: itemCouponDiscount,
                type: 'PERCENTAGE'
            };
            item.couponDiscount = itemCouponDiscount;
            
            // Update final prices with coupon discount
            const priceAfterCoupon = item.priceAfterOffer - (itemCouponDiscount / item.quantity);
            item.finalPrice = priceAfterCoupon;
            item.finalAmount = priceAfterCoupon * item.quantity;
        });
    }

    const couponDiscountAmount = parseFloat(document.getElementById('couponDiscountAmount').textContent || '0');
    const subtotalValue = parseFloat('<%= subtotal %>');
    const originalSubtotalValue = parseFloat('<%= originalSubtotal %>') || subtotalValue;
    const offerDiscountValue = parseFloat('<%= totalOfferDiscount %>') || 0;

    const formData = {
        addressId: selectedAddress.value,
        paymentMethod: selectedPayment.value,
        paymentStatus: selectedPayment.value === 'cod' ? 'pending' : 'paid',
        coupon: appliedCoupon,
        totalAmount: currentTotal,
        originalSubtotal: originalSubtotalValue,
        totalOfferDiscount: offerDiscountValue,
        totalCouponDiscount: couponDiscountAmount,
        subtotal: subtotalValue,
        gstAmount: parseFloat(document.getElementById('gstAmount').textContent),
        shippingCost: parseFloat(document.getElementById('shippingCost').textContent),
        items: processedItems
    };

    try {
        console.log('Sending order data:', formData);
        const response = await fetch('/order/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.success) {
            if (data.paymentMethod === 'cod' || data.paymentMethod === 'wallet') {
                // Redirect to success page for COD and Wallet payments
                window.location.href = data.redirect;
            } else if (data.paymentMethod === 'online') {
                // Initialize Razorpay payment
                const options = {
                    key: '<%= razorpayKey %>',
                    amount: Math.round(currentTotal * 100),
                    currency: data.razorpayOrder.currency,
                    order_id: data.razorpayOrder.id,
                    name: 'Royal Monarch',
                    description: 'Order Payment',
                    handler: async function (response) {
                        try {
                            // Verify payment
                            const verifyResponse = await fetch('/order/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            
                            if (verifyData.success) {
                                window.location.href = verifyData.redirect;
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: 'Payment verification failed. Please contact support.'
                                });
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: 'Payment verification failed. Please try again.'
                            });
                        }
                    },
                    modal: {
                        ondismiss: function() {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Payment Cancelled',
                                text: 'Payment was cancelled. Please try again.'
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.firstName %> <%= user.lastName %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    theme: {
                        color: '#000000'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
                
                // Handle payment failures
                rzp.on('payment.failed', function (response) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: 'The payment failed. Please try again.'
                    });
                });
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to create order'
            });
        }
    } catch (error) {
        console.error('Order creation error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to create order. Please try again.'
        });
    }
}

// Add event listener to the place order button
document.getElementById('placeOrderButton').addEventListener('click', placeOrder);

// Update payment options when total changes
function updatePaymentOptions() {
    const currentTotal = parseFloat(document.getElementById('finalTotal').textContent);
    const walletBalance = parseFloat('<%= walletBalance %>');
    const walletPayment = document.getElementById('walletPayment');
    const walletPaymentLabel = document.getElementById('walletPaymentLabel');
    const codPayment = document.getElementById('codPayment');
    const codPaymentLabel = document.getElementById('codPaymentLabel');

    // Disable COD if total is above 2000
    if (currentTotal > 2000) {
        codPayment.disabled = true;
        codPaymentLabel.classList.add('opacity-50');
        if (codPayment.checked) {
            document.querySelector('input[name="paymentMethod"][value="online"]').checked = true;
        }
    } else {
        codPayment.disabled = false;
        codPaymentLabel.classList.remove('opacity-50');
    }

    if (walletBalance < currentTotal) {
        walletPayment.disabled = true;
        walletPayment.checked = false;
        walletPaymentLabel.classList.add('opacity-50');
    } else {
        walletPayment.disabled = false;
        walletPaymentLabel.classList.remove('opacity-50');
    }
}

// Initialize amounts when page loads
document.addEventListener('DOMContentLoaded', () => {
    const originalSubtotal = parseFloat('<%= subtotal %>');
    const offerDiscount = parseFloat('<%= totalOfferDiscount %>');
    const amounts = calculateAmounts(originalSubtotal, offerDiscount, 0);
    updateDisplayedAmounts(amounts);
    updatePaymentOptions();
});
</script>

<%- include('../partials/footer') %>
