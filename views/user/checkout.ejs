<%- include('../partials/navbar') %>

<div class="min-h-screen bg-gray-50">
    <div class="container">
        <h1 class="text-2xl font-bold mb-6 text-center">Checkout</h1>

        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Left Column -->
            <div class="lg:w-2/3 space-y-4">
                <!-- Shipping Address Section -->
                <div class="checkout-card">
                    <div class="checkout-header">
                        <h2 class="checkout-title">Shipping Address</h2>
                        <button onclick="openAddAddressModal()" class="checkout-text text-blue-600 hover:text-blue-800 font-medium">
                            <i class="fas fa-plus mr-1"></i>Add New Address
                        </button>
                    </div>

                    <div class="checkout-body space-y-3">
                        <% if (addresses && addresses.length > 0) { %>
                            <% addresses.forEach((address, index) => { %>
                                <div class="border rounded-lg p-3 hover:border-black transition-colors cursor-pointer">
                                    <label class="flex items-start gap-3 cursor-pointer">
                                        <input type="radio" 
                                               name="selectedAddress" 
                                               value="<%= address._id %>"
                                               class="checkout-radio"
                                               <%= index === 0 ? 'checked' : '' %>
                                               required>
                                        <div class="flex-grow">
                                            <div class="flex justify-between items-start">
                                                <p class="checkout-text font-medium"><%= address.name %></p>
                                                <span class="checkout-text text-gray-500">
                                                    <%= address.phone %>
                                                    <% if (address.alternatePhone) { %>
                                                        | <%= address.alternatePhone %>
                                                    <% } %>
                                                </span>
                                            </div>
                                            <p class="checkout-text text-gray-600 mt-1">
                                                <%= address.houseName %>, 
                                                <%= address.localityStreet %>, 
                                                <%= address.city %>, 
                                                <%= address.state %> - <%= address.pincode %>
                                            </p>
                                        </div>
                                    </label>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center py-6 bg-gray-50 rounded-lg">
                                <i class="fas fa-map-marker-alt text-3xl text-gray-400 mb-2"></i>
                                <p class="checkout-text text-gray-600">No addresses found. Please add a delivery address.</p>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Order Items Section -->
                <div class="checkout-card">
                    <div class="checkout-header">
                        <h2 class="checkout-title">Order Items</h2>
                    </div>
                    <div class="checkout-body space-y-4">
                        <% cartItems.forEach((item, index) => { %>
                            <div class="flex gap-3 pb-4 <%= index !== cartItems.length - 1 ? 'border-b' : '' %>">
                                <div class="w-20 h-20 flex-shrink-0">
                                    <img src="<%= item.productId.images[0].path %>" 
                                         alt="<%= item.productId.name %>"
                                         class="checkout-image">
                                </div>
                                <div class="flex-grow">
                                    <div class="flex justify-between">
                                        <div>
                                            <h3 class="checkout-text font-medium"><%= item.productId.name %></h3>
                                            <p class="checkout-text text-gray-600">Brand: <%= item.productId.brand %></p>
                                            <p class="checkout-text text-gray-600">Variant: <%= item.variantType %></p>
                                        </div>
                                        <div class="text-right">
                                            <p class="checkout-text text-gray-500 line-through">
                                                ₹<%= item.originalPrice.toFixed(2) %>
                                            </p>
                                            <p class="checkout-price">
                                                ₹<%= item.discountedPrice.toFixed(2) %>
                                            </p>
                                            <p class="checkout-text text-gray-600">
                                                Qty: <%= item.quantity %>
                                            </p>
                                        </div>
                                    </div>
                                    <% if (item.offer) { %>
                                        <div class="mt-1">
                                            <span class="checkout-badge bg-green-100 text-green-800">
                                                <%= item.offer.discount %>% off - <%= item.offer.name %>
                                            </span>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="lg:w-1/3">
                <div class="checkout-summary">
                    <!-- Coupon Section -->
                    <div class="checkout-summary-header">
                        <h3 class="checkout-title">Apply Coupon</h3>
                    </div>
                    <div class="checkout-summary-body">
                        <% if (coupons && coupons.length > 0) { %>
                            <select id="couponSelect" class="checkout-select">
                                <option value="">Select a coupon</option>
                                <% coupons.forEach(coupon => { %>
                                    <option value="<%= coupon._id %>" 
                                            data-type="<%= coupon.discountType %>"
                                            data-value="<%= coupon.discountValue %>"
                                            data-max="<%= coupon.maxDiscount %>">
                                        <%= coupon.code %> - 
                                        <%= coupon.discountType === 'PERCENTAGE' ? 
                                            `${coupon.discountValue}% off` : 
                                            `₹${coupon.discountValue} off` %>
                                        <% if (coupon.maxDiscount) { %>
                                            (Max: ₹<%= coupon.maxDiscount %>)
                                        <% } %>
                                    </option>
                                <% }); %>
                            </select>
                            <button id="couponButton" 
                                    class="checkout-button w-full bg-black text-white hover:bg-gray-800">
                                Apply Coupon
                            </button>
                        <% } else { %>
                            <p class="checkout-text text-gray-600">No coupons available for this order</p>
                        <% } %>
                    </div>

                    <div class="checkout-divider"></div>

                    <div class="checkout-summary-body">
                        <h2 class="checkout-title mb-3">Order Summary</h2>
                        <div class="space-y-2">
                            <div class="checkout-summary-row text-gray-600">
                                <span>Original Subtotal</span>
                                <span>₹<%= originalSubtotal.toFixed(2) %></span>
                            </div>

                            <% if (totalOfferDiscount > 0) { %>
                                <div class="checkout-summary-row text-green-600">
                                    <span>Offer Discount</span>
                                    <span>-₹<%= totalOfferDiscount.toFixed(2) %></span>
                                </div>
                            <% } %>

                            <div class="checkout-summary-row">
                                <span>Subtotal After Offer</span>
                                <span>₹<span id="subtotalAfterOffer"><%= subtotal.toFixed(2) %></span></span>
                            </div>

                            <div id="couponDiscountRow" class="checkout-summary-row text-green-600 hidden">
                                <span>Coupon Discount</span>
                                <span>-₹<span id="couponDiscountAmount">0.00</span></span>
                            </div>

                            <div id="subtotalAfterCouponRow" class="checkout-summary-row hidden">
                                <span>Subtotal After Coupon</span>
                                <span>₹<span id="subtotalAfterCoupon">0.00</span></span>
                            </div>

                            <div class="checkout-summary-row text-gray-600">
                                <span>GST (18%)</span>
                                <span>₹<span id="gstAmount"><%= Math.round(subtotal * 0.18).toFixed(2) %></span></span>
                            </div>

                            <div class="checkout-summary-row text-gray-600">
                                <span>Shipping (2%)</span>
                                <span>₹<span id="shippingCost"><%= shippingCost.toFixed(2) %></span></span>
                            </div>

                            <div class="checkout-divider"></div>

                            <div class="checkout-summary-total flex justify-between">
                                <span>Total</span>
                                <span>₹<span id="finalTotal"><%= (subtotal + Math.round(subtotal * 0.18) + shippingCost).toFixed(2) %></span></span>
                            </div>
                        </div>

                        <!-- Payment Method Selection -->
                        <div class="mt-4">
                            <h3 class="checkout-title mb-3">Payment Method</h3>
                            <div class="space-y-2">
                                <label class="checkout-payment-option" id="codPaymentLabel">
                                    <input type="radio" name="paymentMethod" value="cod" checked id="codPayment">
                                    <div>
                                        <span class="checkout-payment-option-label">Cash on Delivery</span>
                                        <p class="checkout-payment-option-description">Pay when you receive your order</p>
                                    </div>
                                </label>

                                <label class="checkout-payment-option">
                                    <input type="radio" name="paymentMethod" value="online">
                                    <div>
                                        <span class="checkout-payment-option-label">Online Payment</span>
                                        <p class="checkout-payment-option-description">Pay securely with Razorpay</p>
                                    </div>
                                </label>

                                <label class="checkout-payment-option" id="walletPaymentLabel">
                                    <input type="radio" name="paymentMethod" value="wallet" 
                                           id="walletPayment" 
                                           <%= walletBalance < (subtotal + Math.round(subtotal * 0.18) + shippingCost) ? 'disabled' : '' %>>
                                    <div>
                                        <span class="checkout-payment-option-label">Wallet</span>
                                        <p class="checkout-payment-option-description <%= walletBalance >= (subtotal + Math.round(subtotal * 0.18) + shippingCost) ? 'text-green-600' : 'text-red-600' %>">
                                            Balance: ₹<%= walletBalance.toFixed(2) %>
                                            <% if (walletBalance < (subtotal + Math.round(subtotal * 0.18) + shippingCost)) { %>
                                                (Insufficient balance)
                                            <% } %>
                                        </p>
                                    </div>
                                </label>
                            </div>
                        </div>

                        <!-- Place Order Button -->
                        <button id="placeOrderButton"
                                class="checkout-button w-full mt-4 bg-black text-white hover:bg-gray-800">
                            <span id="buttonText">Place Order</span>
                            <span id="buttonSpinner" class="hidden">
                                <i class="fas fa-spinner fa-spin"></i>
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Address Modal -->
<div id="addAddressModal" class="fixed inset-0 bg-gray-100/50 backdrop-blur-sm hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg p-4 w-full max-w-md mx-4 transform transition-all shadow-xl">
        <div class="flex justify-between items-center mb-3">
            <h3 class="checkout-title">Add New Address</h3>
            <button onclick="closeAddAddressModal()" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="addAddressForm" onsubmit="handleAddAddress(event)" novalidate>
            <div class="space-y-3">
                <div>
                    <label class="checkout-label">Full Name</label>
                    <input type="text" name="name" required class="checkout-input">
                    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                </div>
                <div>
                    <label class="checkout-label">House Name/Number</label>
                    <input type="text" name="houseName" required class="checkout-input">
                    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                </div>
                <div>
                    <label class="checkout-label">Street/Locality</label>
                    <input type="text" name="localityStreet" required class="checkout-input">
                    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                </div>
                <div class="grid grid-cols-2 gap-3">
                    <div>
                        <label class="checkout-label">City</label>
                        <input type="text" name="city" required class="checkout-input">
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div>
                        <label class="checkout-label">State</label>
                        <input type="text" name="state" required class="checkout-input">
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                </div>
                <div>
                    <label class="checkout-label">Pincode</label>
                    <input type="text" name="pincode" required class="checkout-input">
                    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                </div>
                <div>
                    <label class="checkout-label">Phone Number</label>
                    <input type="tel" name="phone" required class="checkout-input">
                    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                </div>
                <div>
                    <label class="checkout-label">Alternate Phone (Optional)</label>
                    <input type="tel" name="alternatePhone" class="checkout-input">
                    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                </div>
            </div>
            <div class="mt-4 flex justify-end space-x-2">
                <button type="button" onclick="closeAddAddressModal()"
                        class="checkout-button border border-gray-300 text-gray-700 hover:bg-gray-50">
                    Cancel
                </button>
                <button type="submit"
                        class="checkout-button bg-black text-white hover:bg-gray-800">
                    Add Address
                </button>
            </div>
        </form>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
let appliedCoupon = null;
let rzpInstance = null;

// Function to calculate all amounts
function calculateAmounts(subtotal, offerDiscount = 0, couponDiscount = 0) {
    // Original subtotal is the sum of original product prices
    const originalSubtotal = Number(subtotal.toFixed(2));
    
    // Calculate subtotal after offers (this should remain constant)
    const subtotalAfterOffers = Number((originalSubtotal - offerDiscount).toFixed(2));
    
    // Calculate subtotal after coupon by deducting coupon discount from subtotal after offers
    const subtotalAfterCoupon = Number((subtotalAfterOffers - couponDiscount).toFixed(2));

    // Calculate GST and shipping based on subtotal after coupon
    const totalGstAmount = Number((Math.round(subtotalAfterCoupon * 18) / 100).toFixed(2)); // 18% GST
    const totalShippingCost = Number((Math.round(subtotalAfterCoupon * 2) / 100).toFixed(2)); // 2% Shipping

    // Calculate final total
    const finalTotal = Number((subtotalAfterCoupon + totalGstAmount + totalShippingCost).toFixed(2));

    return {
        originalSubtotal,
        subtotalAfterOffers,
        subtotalAfterCoupon,
        gstAmount: totalGstAmount,
        shippingCost: totalShippingCost,
        finalTotal
    };
}

// Function to update displayed amounts
function updateDisplayedAmounts(amounts) {
    // Keep subtotal after offer constant
    const subtotalAfterOfferElement = document.getElementById('subtotalAfterOffer');
    if (subtotalAfterOfferElement) {
        subtotalAfterOfferElement.textContent = Number('<%= subtotal %>').toFixed(2);
    }

    // Update subtotal after coupon by deducting coupon discount from subtotal after offer
    const subtotalAfterCouponElement = document.getElementById('subtotalAfterCoupon');
    if (subtotalAfterCouponElement) {
        const subtotalAfterOffer = Number('<%= subtotal %>');
        const couponDiscount = Number(document.getElementById('couponDiscountAmount').textContent || '0');
        const subtotalAfterCoupon = Number((subtotalAfterOffer - couponDiscount).toFixed(2));
        subtotalAfterCouponElement.textContent = subtotalAfterCoupon.toFixed(2);

        // Calculate GST and shipping based on subtotal after coupon
        const gstAmount = Number((Math.round(subtotalAfterCoupon * 0.18 * 100) / 100).toFixed(2)); // 18% GST
        const shippingCost = Number((Math.round(subtotalAfterCoupon * 0.02 * 100) / 100).toFixed(2)); // 2% Shipping
        const finalTotal = Number((subtotalAfterCoupon + gstAmount + shippingCost).toFixed(2));

        // Update GST amount
        const gstAmountElement = document.getElementById('gstAmount');
        if (gstAmountElement) {
            gstAmountElement.textContent = gstAmount.toFixed(2);
        }

        // Update shipping cost
        const shippingCostElement = document.getElementById('shippingCost');
        if (shippingCostElement) {
            shippingCostElement.textContent = shippingCost.toFixed(2);
        }

        // Update final total
        const finalTotalElement = document.getElementById('finalTotal');
        if (finalTotalElement) {
            finalTotalElement.textContent = finalTotal.toFixed(2);
        }
    }
}

// Update the cart items data to include correct calculations
const cartItemsData = <%- JSON.stringify(cartItems.map(item => {
    // Get the original price from the product model
    const variant = item.productId.variants.find(v => v.type === item.variantType);
    const originalPrice = Number(variant ? variant.price : 0).toFixed(2);
    const priceAfterOffer = Number(item.priceAfterOffer).toFixed(2);
    const offerDiscount = Number((originalPrice - priceAfterOffer).toFixed(2));
    
    // Calculate GST and shipping for this item
    const itemGstAmount = Number((Math.round(priceAfterOffer * 0.18 * 100) / 100).toFixed(2));
    const itemShippingCost = Number((Math.round(priceAfterOffer * 0.02 * 100) / 100).toFixed(2));
    
    return {
        productId: item.productId._id,
        name: item.productId.name,
        brand: item.productId.brand,
        category: item.productId.category ? item.productId.category.name || "Category" : "Category",
        images: item.productId.images.map(img => ({ path: img.path, filename: img.filename })),
        quantity: Number(item.quantity),
        originalPrice: Number(originalPrice),
        variantType: item.variantType,
        status: 'pending',
        priceAfterOffer: Number(priceAfterOffer),
        offerDiscount: Number(offerDiscount),
        subtotalforproduct: Number((originalPrice * item.quantity).toFixed(2)),
        finalPrice: Number(priceAfterOffer),
        finalAmount: Number((priceAfterOffer * item.quantity).toFixed(2)),
        gstAmount: Number((itemGstAmount * item.quantity).toFixed(2)),
        shippingCost: Number((itemShippingCost * item.quantity).toFixed(2)),
        couponDiscount: 0,
        couponForProduct: {
            code: null,
            discount: 0,
            type: null
        },
        offer: item.offer ? {
            name: item.offer.name || '',
            type: item.offer.type || 'product',
            discount: Number(item.offer.discount || 0).toFixed(2)
        } : null
    };
})) %>;

// Add this to your DOMContentLoaded event listener
document.addEventListener('DOMContentLoaded', () => {
    // ... existing code ...

    // Initialize coupon button
    const couponButton = document.getElementById('couponButton');
    if (couponButton) {
        couponButton.addEventListener('click', handleCouponButton);
    }
});

function handleCouponButton() {
    const button = document.getElementById('couponButton');
    if (!button) return;

    if (button.textContent.trim() === 'Apply Coupon') {
        applyCoupon();
    } else {
        removeCoupon();
    }
}

function removeCoupon() {
    try {
        // Hide coupon discount row and subtotal after coupon row
        document.getElementById('couponDiscountRow').classList.add('hidden');
        document.getElementById('subtotalAfterCouponRow').classList.add('hidden');
        
        // Reset coupon discount
        document.getElementById('couponDiscountAmount').textContent = '0.00';
        
        // Reset button state
        const button = document.getElementById('couponButton');
        if (button) {
            button.textContent = 'Apply Coupon';
            button.classList.remove('bg-red-600', 'hover:bg-red-700');
            button.classList.add('bg-black', 'hover:bg-gray-800');
            // Ensure the button is clickable
            button.disabled = false;
        }

        // Enable coupon select
        const select = document.getElementById('couponSelect');
        if (select) {
            select.disabled = false;
            select.value = '';
        }
        
        // Get original amounts
        const originalSubtotal = parseFloat('<%= subtotal %>');
        const offerDiscount = parseFloat('<%= totalOfferDiscount %>');
        
        // Calculate all amounts without coupon
        const amounts = calculateAmounts(originalSubtotal, offerDiscount, 0);
        
        // Update displayed amounts
        updateDisplayedAmounts(amounts);
        
        // Clear applied coupon
        appliedCoupon = null;

        // Update payment options based on new total
        updatePaymentOptions();

        // Show success message
        Swal.fire({
            icon: 'success',
            title: 'Coupon Removed',
            text: 'Coupon has been removed successfully!',
            timer: 1500,
            showConfirmButton: false
        });
    } catch (error) {
        console.error('Error removing coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to remove coupon. Please try again.'
        });
    }
}

async function applyCoupon() {
    try {
        const select = document.getElementById('couponSelect');
        const option = select.options[select.selectedIndex];
        const button = document.getElementById('couponButton');

        if (!option.value) {
            throw new Error('Please select a coupon');
        }

        // Get original amounts
        const subtotalValue = parseFloat('<%= subtotal %>');
        const offerDiscountValue = parseFloat('<%= totalOfferDiscount %>');

        // Prepare items data with subtotal after offer for each product
        const itemsData = cartItemsData.map(item => ({
            productId: item.productId,
            name: item.name,
            quantity: item.quantity,
            priceAfterOffer: item.priceAfterOffer,
            subtotalAfterOffer: item.priceAfterOffer * item.quantity,
            originalPrice: item.originalPrice,
            variantType: item.variantType,
            offer: item.offer
        }));

        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                couponId: option.value,
                items: itemsData
            })
        });

        const data = await response.json();

        if (data.success) {
            // Show coupon discount and subtotal after coupon
            document.getElementById('couponDiscountRow').classList.remove('hidden');
            document.getElementById('subtotalAfterCouponRow').classList.remove('hidden');
            document.getElementById('couponDiscountAmount').textContent = 
                data.discount.toFixed(2);

            // Change button text and appearance
            if (button) {
                button.textContent = 'Remove Coupon';
                button.classList.remove('bg-black', 'hover:bg-gray-800');
                button.classList.add('bg-red-600', 'hover:bg-red-700');
                button.disabled = false;
            }

            // Disable coupon select
            select.disabled = true;

            // Calculate all amounts with the new coupon discount
            const amounts = calculateAmounts(subtotalValue, offerDiscountValue, data.discount);
            
            // Update displayed amounts
            updateDisplayedAmounts(amounts);

            // Store applied coupon with all details including individual item discounts
            appliedCoupon = {
                id: option.value,
                code: option.textContent.split(' - ')[0],
                type: option.dataset.type,
                value: parseFloat(option.dataset.value),
                maxDiscount: option.dataset.max ? parseFloat(option.dataset.max) : null,
                discount: data.discount,
                items: data.items.map(item => ({
                    productId: item.productId,
                    couponDiscount: Number(item.couponDiscount || 0).toFixed(2),
                    couponForProduct: {
                        code: item.couponForProduct.code,
                        discount: Number(item.couponForProduct.discount || 0).toFixed(2),
                        type: item.couponForProduct.type
                    }
                }))
            };

            // Update cart items data with coupon discounts
            cartItemsData.forEach((item, index) => {
                if (data.items[index]) {
                    const couponData = data.items[index];
                    item.couponDiscount = Number(couponData.couponDiscount || 0).toFixed(2);
                    item.couponForProduct = {
                        code: couponData.couponForProduct.code,
                        discount: Number(couponData.couponForProduct.discount || 0).toFixed(2),
                        type: couponData.couponForProduct.type
                    };
                }
            });

            // Update payment options based on new total
            updatePaymentOptions();

            // Show appropriate alert based on maxDiscountApplied
            if (data.maxDiscountApplied) {
                Swal.fire({
                    icon: 'info',
                    title: 'Maximum Discount Applied',
                    text: `The coupon discount has been capped at ₹${data.discount.toFixed(2)} as per the maximum discount limit.`,
                    confirmButtonText: 'OK'
                });
            } else {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied',
                    text: `Discount of ₹${data.discount.toFixed(2)} applied successfully!`,
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to apply coupon'
        });
    }
}

// Update the placeOrder function
async function placeOrder() {
    try {
        // Check if there are any addresses
        const addresses = document.querySelectorAll('input[name="selectedAddress"]');
        if (addresses.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'No Address Found',
                text: 'Please add a delivery address before placing your order.',
                confirmButtonText: 'Add Address',
                showCancelButton: true,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    openAddAddressModal();
                }
            });
            return;
        }

        // Validate address
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        if (!selectedAddress) {
            showError('Please select a shipping address');
            return;
        }

        // Validate payment method
        const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedPayment) {
            showError('Please select a payment method');
            return;
        }

        const paymentMethod = selectedPayment.value;
        
        // Validate wallet balance if using wallet
        if (paymentMethod === 'wallet') {
            const walletBalance = parseFloat('<%= walletBalance %>');
            const totalAmount = parseFloat(document.getElementById('finalTotal').textContent);
            if (walletBalance < totalAmount) {
                showError('Insufficient wallet balance');
                return;
            }
        }

        // Validate total amount for online payment
        if (paymentMethod === 'online') {
            const totalAmount = parseFloat(document.getElementById('finalTotal').textContent);
            if (totalAmount < 1) {
                showError('Minimum order amount for online payment is ₹1');
                return;
            }
        }

        // Process cart items
        const processedItems = JSON.parse(JSON.stringify(cartItemsData));
        
        // Validate processed items
        if (!Array.isArray(processedItems) || processedItems.length === 0) {
            throw new Error('Cart is empty');
        }

        // Get coupon data if applied
        let couponData = null;
        if (appliedCoupon) {
            const couponSelect = document.getElementById('couponSelect');
            const selectedOption = couponSelect.options[couponSelect.selectedIndex];
            couponData = {
                id: appliedCoupon.id,
                code: appliedCoupon.code,
                type: selectedOption.dataset.type,
                value: parseFloat(selectedOption.dataset.value),
                maxDiscount: selectedOption.dataset.max ? parseFloat(selectedOption.dataset.max) : null,
                discount: appliedCoupon.discount
            };
        }

        // Prepare form data
        const formData = {
            addressId: selectedAddress.value,
            paymentMethod: paymentMethod,
            coupon: couponData,
            items: processedItems.map(item => ({
                ...item,
                couponDiscount: Number(item.couponDiscount || 0).toFixed(2),
                couponForProduct: item.couponForProduct
            })),
            totalAmount: Number(document.getElementById('finalTotal').textContent),
            originalSubtotal: Number('<%= originalSubtotal %>'),
            totalOfferDiscount: Number('<%= totalOfferDiscount %>'),
            totalCouponDiscount: Number(document.getElementById('couponDiscountAmount').textContent || '0'),
            subtotal: Number(document.getElementById('subtotalAfterCoupon').textContent || '<%= subtotal %>'),
            gstAmount: Number(document.getElementById('gstAmount').textContent),
            shippingCost: Number(document.getElementById('shippingCost').textContent)
        };

        // Log the request data
        console.log('Sending order data:', JSON.stringify(formData, null, 2));

        // Show loading state
        const placeOrderBtn = document.getElementById('placeOrderButton');
        placeOrderBtn.disabled = true;
        placeOrderBtn.querySelector('#buttonText').textContent = 'Processing...';
        placeOrderBtn.querySelector('#buttonSpinner').classList.remove('hidden');

        // Send order data to server
        const response = await fetch('/order/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify(formData)
        });

        // Log the response status
        console.log('Response status:', response.status);

        const responseData = await response.json();
        
        // Log the response data
        console.log('Response data:', responseData);

        if (!response.ok) {
            throw new Error(responseData.message || 'Error creating order');
        }

        // Handle different payment methods
        if (paymentMethod === 'online' && responseData.razorpayOrder) {
            // Initialize Razorpay
            const options = {
                key: responseData.razorpayOrder.key,
                amount: responseData.razorpayOrder.amount,
                currency: responseData.razorpayOrder.currency,
                name: responseData.razorpayOrder.name,
                description: responseData.razorpayOrder.description,
                order_id: responseData.razorpayOrder.id,
                handler: async function(response) {
                    try {
                        // Verify payment with server
                        const verifyResponse = await fetch('/order/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            credentials: 'include',
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature
                            })
                        });

                        const verifyData = await verifyResponse.json();
                        window.location.href = verifyData.redirect;
                    } catch (error) {
                        console.error('Payment verification error:', error);
                        showError(error.message || 'Error verifying payment');
                        resetButtonState();
                    }
                },
                modal: {
                    ondismiss: async function() {
                        try {
                            // When modal is dismissed, verify payment with empty signature
                            const verifyResponse = await fetch('/order/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                credentials: 'include',
                                body: JSON.stringify({
                                    razorpay_order_id: responseData.razorpayOrder.id,
                                    razorpay_payment_id: '',
                                    razorpay_signature: ''
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            
                            // Show payment cancelled notification
                            Swal.fire({
                                icon: 'info',
                                title: 'Payment Cancelled',
                                text: 'Your order has been saved with pending payment status. You can retry the payment later.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = verifyData.redirect;
                            });
                        } catch (error) {
                            console.error('Error handling modal dismissal:', error);
                            showError('Error processing your request. Please try again.');
                            resetButtonState();
                        }
                    }
                },
                prefill: responseData.razorpayOrder.prefill,
                theme: responseData.razorpayOrder.theme
            };

            // Create new Razorpay instance
            rzpInstance = new Razorpay(options);

            // Add event listeners
            rzpInstance.on('payment.failed', async function(response) {
                try {
                    // Verify payment with server even for failed payments
                    const verifyResponse = await fetch('/order/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            razorpay_order_id: responseData.razorpayOrder.id,
                            razorpay_payment_id: response.error.metadata.payment_id || '',
                            razorpay_signature: ''
                        })
                    });

                    const verifyData = await verifyResponse.json();
                    window.location.href = verifyData.redirect;
                } catch (error) {
                    console.error('Payment failed error:', error);
                    showError('Error processing failed payment. Please try again.');
                    resetButtonState();
                }
            });

            // Open the payment modal
            rzpInstance.open();
        } else {
            // For other payment methods, redirect to success page
            window.location.href = responseData.redirect;
        }

    } catch (error) {
        console.error('Order creation error:', error);
        showError(error.message || 'Error creating order. Please try again.');
        resetButtonState();
    }
}

// Add helper function to reset button state
function resetButtonState() {
    const placeOrderBtn = document.getElementById('placeOrderButton');
    placeOrderBtn.disabled = false;
    placeOrderBtn.querySelector('#buttonText').textContent = 'Place Order';
    placeOrderBtn.querySelector('#buttonSpinner').classList.add('hidden');
}

// Ensure the event listener is added after the DOM is fully loaded
document.addEventListener('DOMContentLoaded', () => {
    const placeOrderButton = document.getElementById('placeOrderButton');
    if (placeOrderButton) {
        placeOrderButton.addEventListener('click', placeOrder);
    } else {
        console.error('Place Order button not found');
    }
    
    // Initialize amounts
    const originalSubtotal = parseFloat('<%= originalSubtotal %>');
    const offerDiscount = parseFloat('<%= totalOfferDiscount %>');
    const amounts = calculateAmounts(originalSubtotal, offerDiscount, 0);
    updateDisplayedAmounts(amounts);
    updatePaymentOptions();

    // Add this to ensure Razorpay script is loaded
    if (typeof Razorpay === 'undefined') {
        console.error('Razorpay script not loaded');
        // You might want to show an error message to the user
    }

    // Select first address by default
    const firstAddress = document.querySelector('input[name="selectedAddress"]');
    if (firstAddress) {
        firstAddress.checked = true;
    }
});

// Update payment options when total changes
function updatePaymentOptions() {
    const currentTotal = parseFloat(document.getElementById('finalTotal').textContent);
    const walletBalance = parseFloat('<%= walletBalance %>');
    const walletPayment = document.getElementById('walletPayment');
    const walletPaymentLabel = document.getElementById('walletPaymentLabel');
    const codPayment = document.getElementById('codPayment');
    const codPaymentLabel = document.getElementById('codPaymentLabel');

    // Disable COD if total is above 2000
    if (currentTotal > 2000) {
        codPayment.disabled = true;
        codPaymentLabel.classList.add('opacity-50');
        if (codPayment.checked) {
            document.querySelector('input[name="paymentMethod"][value="online"]').checked = true;
        }
    } else {
        codPayment.disabled = false;
        codPaymentLabel.classList.remove('opacity-50');
    }

    if (walletBalance < currentTotal) {
        walletPayment.disabled = true;
        walletPayment.checked = false;
        walletPaymentLabel.classList.add('opacity-50');
    } else {
        walletPayment.disabled = false;
        walletPaymentLabel.classList.remove('opacity-50');
    }
}

// Add Address Modal Functions
function openAddAddressModal() {
    document.getElementById('addAddressModal').classList.remove('hidden');
    document.getElementById('addAddressModal').classList.add('flex');
}

function closeAddAddressModal() {
    document.getElementById('addAddressModal').classList.add('hidden');
    document.getElementById('addAddressModal').classList.remove('flex');
    document.getElementById('addAddressForm').reset();
}

// Add validation functions
function validateName(name) {
    const trimmedName = name.trim();
    if (!trimmedName) {
        return 'Name is required';
    }
    if (trimmedName.length < 3) {
        return 'Name must be at least 3 characters long';
    }
    if (!/^[a-zA-Z\s]+$/.test(trimmedName)) {
        return 'Name can only contain letters and spaces';
    }
    return '';
}

function validateAddress(address) {
    const trimmedAddress = address.trim();
    if (!trimmedAddress) {
        return 'Address is required';
    }
    if (trimmedAddress.length < 5) {
        return 'Address must be at least 5 characters long';
    }
    return '';
}

function validateCityState(value) {
    const trimmedValue = value.trim();
    if (!trimmedValue) {
        return 'This field is required';
    }
    if (trimmedValue.length < 2) {
        return 'Must be at least 2 characters long';
    }
    if (!/^[a-zA-Z\s]+$/.test(trimmedValue)) {
        return 'Can only contain letters and spaces';
    }
    return '';
}

function validatePhone(phone) {
    const trimmedPhone = phone.trim();
    if (!trimmedPhone) {
        return 'Phone number is required';
    }
    if (!/^\d{10}$/.test(trimmedPhone)) {
        return 'Phone number must be 10 digits';
    }
    return '';
}

function validatePincode(pincode) {
    const trimmedPincode = pincode.trim();
    if (!trimmedPincode) {
        return 'Pincode is required';
    }
    if (!/^\d{6}$/.test(trimmedPincode)) {
        return 'Pincode must be 6 digits';
    }
    return '';
}

function validateAlternatePhone(phone) {
    if (!phone) return ''; // Optional field
    const trimmedPhone = phone.trim();
    if (trimmedPhone && !/^\d{10}$/.test(trimmedPhone)) {
        return 'Alternate phone number must be 10 digits';
    }
    return '';
}

function showError(inputElement, message) {
    const errorDiv = inputElement.nextElementSibling;
    errorDiv.textContent = message;
    errorDiv.classList.remove('hidden');
    inputElement.classList.add('border-red-500');
}

function clearError(inputElement) {
    const errorDiv = inputElement.nextElementSibling;
    errorDiv.textContent = '';
    errorDiv.classList.add('hidden');
    inputElement.classList.remove('border-red-500');
}

// Add input validation for the add address form
document.addEventListener('DOMContentLoaded', function() {
    const addAddressForm = document.getElementById('addAddressForm');
    if (addAddressForm) {
        const inputs = addAddressForm.querySelectorAll('input[required]');
        
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                let error = '';
                
                switch(this.name) {
                    case 'name':
                        error = validateName(this.value);
                        break;
                    case 'houseName':
                    case 'localityStreet':
                        error = validateAddress(this.value);
                        break;
                    case 'city':
                    case 'state':
                        error = validateCityState(this.value);
                        break;
                    case 'phone':
                        error = validatePhone(this.value);
                        break;
                    case 'pincode':
                        error = validatePincode(this.value);
                        break;
                    case 'alternatePhone':
                        error = validateAlternatePhone(this.value);
                        break;
                }
                
                if (error) {
                    showError(this, error);
                } else {
                    clearError(this);
                }
            });
        });
    }
});

// Update the handleAddAddress function to include validation
async function handleAddAddress(event) {
    event.preventDefault();
    
    try {
        const form = event.target;
        const formData = new FormData(form);
        const addressData = Object.fromEntries(formData.entries());
        
        // Validate all fields
        let hasError = false;
        
        const nameError = validateName(addressData.name);
        if (nameError) {
            showError(form.querySelector('[name="name"]'), nameError);
            hasError = true;
        }
        
        const houseNameError = validateAddress(addressData.houseName);
        if (houseNameError) {
            showError(form.querySelector('[name="houseName"]'), houseNameError);
            hasError = true;
        }
        
        const localityError = validateAddress(addressData.localityStreet);
        if (localityError) {
            showError(form.querySelector('[name="localityStreet"]'), localityError);
            hasError = true;
        }
        
        const cityError = validateCityState(addressData.city);
        if (cityError) {
            showError(form.querySelector('[name="city"]'), cityError);
            hasError = true;
        }
        
        const stateError = validateCityState(addressData.state);
        if (stateError) {
            showError(form.querySelector('[name="state"]'), stateError);
            hasError = true;
        }
        
        const pincodeError = validatePincode(addressData.pincode);
        if (pincodeError) {
            showError(form.querySelector('[name="pincode"]'), pincodeError);
            hasError = true;
        }
        
        const phoneError = validatePhone(addressData.phone);
        if (phoneError) {
            showError(form.querySelector('[name="phone"]'), phoneError);
            hasError = true;
        }
        
        const alternatePhoneError = validateAlternatePhone(addressData.alternatePhone);
        if (alternatePhoneError) {
            showError(form.querySelector('[name="alternatePhone"]'), alternatePhoneError);
            hasError = true;
        }
        
        if (hasError) {
            return;
        }
        
        const response = await fetch('/address/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
        });
        
        if (response.redirected) {
            closeAddAddressModal();
            window.location.reload();
            return;
        }

        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            const data = await response.json();
            if (data.success) {
                closeAddAddressModal();
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to add address');
            }
        } else {
            closeAddAddressModal();
            window.location.reload();
        }
    } catch (error) {
        console.error('Error adding address:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to add address. Please try again.'
        });
    }
}

// Update closeAddAddressModal to clear errors
function closeAddAddressModal() {
    document.getElementById('addAddressModal').classList.add('hidden');
    document.getElementById('addAddressModal').classList.remove('flex');
    document.getElementById('addAddressForm').reset();
    // Clear all error messages and styles
    document.querySelectorAll('#addAddressForm .error-message').forEach(el => {
        el.textContent = '';
        el.classList.add('hidden');
    });
    document.querySelectorAll('#addAddressForm .checkout-input').forEach(el => {
        el.classList.remove('border-red-500');
    });
}
</script>

<%- include('../partials/footer') %>

<!-- Add custom styles for compact layout -->
<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
    }

    .checkout-card {
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }

    .checkout-header {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f3f4f6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .checkout-body {
        padding: 1rem;
    }

    .checkout-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #1f2937;
    }

    .checkout-text {
        font-size: 0.875rem;
        color: #4b5563;
    }

    .checkout-price {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .checkout-input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        font-size: 0.875rem;
    }

    .checkout-button {
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        transition: all 0.2s;
    }

    .checkout-button:hover {
        transform: translateY(-1px);
    }

    .checkout-image {
        width: 4rem;
        height: 4rem;
        object-fit: cover;
        border-radius: 0.5rem;
    }

    .checkout-divider {
        height: 1px;
        background-color: #f3f4f6;
        margin: 0.75rem 0;
    }

    .checkout-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
    }

    .checkout-radio {
        width: 1rem;
        height: 1rem;
        margin-top: 0.25rem;
    }

    .checkout-label {
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
        color: #4b5563;
    }

    .checkout-select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .checkout-summary {
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 1rem;
    }

    .checkout-summary-header {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f3f4f6;
    }

    .checkout-summary-body {
        padding: 1rem;
    }

    .checkout-summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }

    .checkout-summary-total {
        font-weight: 600;
        font-size: 1rem;
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid #f3f4f6;
    }

    .checkout-payment-option {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .checkout-payment-option:hover {
        border-color: #000;
    }

    .checkout-payment-option input[type="radio"] {
        width: 1rem;
        height: 1rem;
    }

    .checkout-payment-option-label {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .checkout-payment-option-description {
        font-size: 0.75rem;
        color: #6b7280;
    }
</style>

