<%- include("../partials/navbar") %>

<div class="container mx-auto px-4 py-6">
    <!-- Product Overview Section -->
    <section class="mb-12">
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Image Gallery -->
            <div class="w-full md:w-1/2">
                <div class="flex gap-4">
                    <!-- Thumbnails -->
                    <div class="flex flex-col gap-2 w-24">
                        <% product.images.forEach((image, index) => { %>
                            <img 
                                src="<%= image.path %>" 
                                alt="<%= product.name %> thumbnail" 
                                class="w-full aspect-square object-cover cursor-pointer thumbnail-img rounded-lg border border-gray-200 hover:border-[#8B4513] transition-all duration-300"
                                onclick="updateMainImage(this.src)"
                            >
                        <% }) %>
                    </div>

                    <!-- Main Image -->
                    <div class="flex-grow relative overflow-hidden rounded-xl h-[550px] shadow-xl">
                        <div class="image-zoom-container w-full h-full">
                            <img 
                                id="mainImage" 
                                src="<%= product.images[0].path %>" 
                                alt="<%= product.name %>" 
                                class="w-full h-full object-cover rounded-xl"
                            >
                        </div>
                    </div>
                </div>
            </div>

            <!-- Product Information -->
            <div class="w-full md:w-1/2">
                <div class="space-y-6">
                    <!-- Product Header -->
                    <div class="flex items-center justify-between border-b border-gray-200 pb-4">
                        <h1 class="text-2xl font-serif font-bold text-[#2c2c2c]"><%= product.name %></h1>
                        <button id="wishlistBtn" class="focus:outline-none transform hover:scale-110 transition-transform duration-300" onclick="toggleWishlist('<%= product._id %>')">
                            <i class="fas fa-heart text-2xl <%= isInWishlist ? 'text-red-500' : 'text-gray-400' %>"></i>
                        </button>
                    </div>

                    <!-- Description -->
                    <div class="border-b border-gray-200 pb-4">
                        <p class="text-gray-600 text-base font-serif leading-relaxed"><%= product.description %></p>
                    </div>

                    <!-- Product Details & Price -->
                    <div class="grid grid-cols-2 gap-4">
                        <!-- Price Section -->
                        <div class="bg-[#8B4513]/5 p-4 rounded-xl shadow-sm">
                            <div class="flex flex-col gap-2">
                                <% const firstVariant = product.variants[0]; %>
                                <% const discountedPrice = Math.round(firstVariant.price * (1 - firstVariant.discount/100)); %>
                                <div class="flex flex-col gap-2">
                                    <div class="flex items-baseline gap-2">
                                        <span id="currentPrice" class="text-3xl font-bold text-[#8B4513]">₹<%= discountedPrice %></span>
                                        <% if (firstVariant.discount > 0) { %>
                                            <span id="originalPrice" class="text-lg text-gray-500 line-through">₹<%= firstVariant.price %></span>
                                        <% } %>
                                    </div>
                                    <% if (firstVariant.discount > 0) { %>
                                        <div class="flex justify-start">
                                            <span id="discountBadge" class="px-3 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium max-w-[80px]">
                                                <%= firstVariant.discount %>% OFF
                                            </span>
                                        </div>
                                    <% } %>
                                </div>
                                <p id="stockStatus" class="font-medium text-sm">
                                    <% if (firstVariant.stock > 0) { %>
                                        <span class="text-green-600">In Stock (<%= firstVariant.stock %> available)</span>
                                    <% } else { %>
                                        <span class="text-red-600">Out of Stock</span>
                                    <% } %>
                                </p>
                            </div>
                        </div>

                        <!-- Product Details -->
                        <div class="bg-gray-50 p-4 rounded-xl shadow-sm space-y-2">
                            <div class="flex items-center gap-2">
                                <span class="font-medium text-gray-700 text-sm">Brand:</span>
                                <span class="text-gray-600 text-sm"><%= product.brand %></span>
                            </div>
                            <div class="flex items-center gap-2">
                                <span class="font-medium text-gray-700 text-sm">Color:</span>
                                <span class="text-gray-600 text-sm"><%= product.color %></span>
                            </div>
                            <div class="flex items-center gap-2">
                                <span class="font-medium text-gray-700 text-sm">Category:</span>
                                <span class="text-gray-600 text-sm"><%= product.category.name %></span>
                            </div>
                        </div>
                    </div>

                    <!-- Specifications -->
                    <div class="bg-white p-4 rounded-xl shadow-sm">
                        <h3 class="font-serif text-lg font-bold text-[#2c2c2c] mb-3">Specifications</h3>
                        <ul id="specsList" class="list-disc list-inside text-gray-600 space-y-2 text-sm">
                            <% if (product.variants[0].specifications && product.variants[0].specifications.length > 0) { %>
                                <% product.variants[0].specifications.forEach(spec => { %>
                                    <li class="spec-item text-gray-600"><%= spec %></li>
                                <% }); %>
                            <% } else { %>
                                <li class="spec-item text-gray-600">No specifications available</li>
                            <% } %>
                        </ul>
                    </div>

                    <!-- Variant Selection -->
                    <div class="space-y-2">
                        <label class="block font-serif text-base font-medium text-gray-700">Select Variant:</label>
                        <select id="variantSelect" class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300 text-sm">
                            <% product.variants.forEach((variant, index) => { %>
                                <option value="<%= index %>" 
                                        data-type="<%= variant.type %>"
                                        data-price="<%= variant.price %>"
                                        data-stock="<%= variant.stock %>"
                                        data-discount="<%= variant.discount %>"
                                        data-offer-name="<%= variant.offerName %>"
                                        data-specs='<%= JSON.stringify(variant.specifications || []) %>'
                                        data-in-cart="<%= variant.inCart %>"
                                        data-in-wishlist="<%= variant.inWishlist %>">
                                    <%= variant.type %> 
                                </option>
                            <% }) %>
                        </select>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex gap-4">
                        <button id="cartBtn" onclick="handleCart('<%= product._id %>')" 
                                class="w-full text-white py-3 rounded-lg transition-colors duration-300 font-serif text-base disabled:bg-gray-400 shadow-lg hover:shadow-xl <%= product.variants[0].stock <= 0 ? 'bg-gray-400 cursor-not-allowed' : (initialCartStatus ? 'bg-red-600 hover:bg-red-700' : 'bg-[#8B4513] hover:bg-[#6B3513]') %>">
                            <%= product.variants[0].stock <= 0 ? 'Out of Stock' : (initialCartStatus ? 'Remove from Cart' : 'Add to Cart') %>
                        </button>
                        <button id="buyNowBtn" onclick="buyNow('<%= product._id %>')" 
                                class="hidden border-2 border-[#8B4513] py-3 rounded-lg hover:bg-[#8B4513]/5 transition-colors duration-300 font-serif text-base disabled:border-gray-400 disabled:text-gray-400 shadow-lg hover:shadow-xl">
                            Buy Now
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Similar Products Section -->
    <section>
        <div class="bg-white p-6 rounded-xl shadow-sm">
            <h2 class="text-2xl font-serif font-bold text-[#2c2c2c] mb-6 relative inline-block">
                Similar Products
                <div class="absolute bottom-0 left-0 w-20 h-[2px] bg-gradient-to-r from-transparent via-[#8B4513] to-transparent"></div>
            </h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                <% similarProducts.forEach(similar => { %>
                    <div class="bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden group transform hover:scale-[1.02] transition-all duration-300">
                        <a href="/product/view/<%= similar._id %>" class="block">
                            <div class="aspect-w-1 aspect-h-1 overflow-hidden">
                                <img 
                                    src="<%= similar.images[0].path %>" 
                                    alt="<%= similar.name %>"
                                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500 product-image"
                                    data-fallback="/images/placeholder.jpg"
                                >
                            </div>
                            <div class="p-4">
                                <h3 class="text-sm font-serif mb-1 text-gray-800 group-hover:text-[#8B4513] transition-colors duration-300"><%= similar.name %></h3>
                                <p class="text-gray-600 mb-2 font-serif text-xs"><%= similar.brand || 'No brand' %></p>
                                <div class="flex justify-between items-center mb-2">
                                    <div class="flex items-center gap-1">
                                        <% const similarVariant = similar.variants[0]; %>
                                        <% 
                                        const hasOffer = similar.offer && similar.offer.discount > 0;
                                        const similarDiscountedPrice = hasOffer ? 
                                            Math.round(similarVariant.price * (1 - similar.offer.discount/100)) : 
                                            similarVariant.price; 
                                        %>
                                        <span class="text-base font-serif text-[#8B4513]">₹<%= similarDiscountedPrice %></span>
                                        <% if (hasOffer) { %>
                                            <span class="text-xs text-gray-500 line-through">₹<%= similarVariant.price %></span>
                                            <span class="text-xs text-[#8B4513] font-serif ml-1"><%= similar.offer.discount %>% OFF</span>
                                        <% } %>
                                    </div>
                                    <button class="wishlist-toggle text-gray-600 hover:text-red-500 transition-colors" 
                                            onclick="event.preventDefault(); event.stopPropagation(); toggleWishlist('<%= similar._id %>', this);"
                                            data-product-id="<%= similar._id %>"
                                            data-variant-type="<%= similar.variants[0].type %>"
                                            data-in-wishlist="<%= similar.variants[0].inWishlist ? 'true' : 'false' %>">
                                        <i class="<%= similar.variants[0].inWishlist ? 'fas fa-heart text-red-500' : 'far fa-heart' %>"></i>
                                    </button>
                                </div>
                            </div>
                        </a>
                        <div class="p-4 pt-0">
                            <div class="flex flex-col gap-2">
                                <select class="variant-select w-full p-2 text-xs border border-gray-200 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300" data-product-id="<%= similar._id %>">
                                    <% if (similar.variants && similar.variants.length > 0) { %>
                                        <% similar.variants.forEach(variant => { %>
                                            <option value="<%= variant.type %>" 
                                                    data-stock="<%= variant.stock %>" 
                                                    data-price="<%= variant.price %>"
                                                    data-in-wishlist="<%= variant.inWishlist ? 'true' : 'false' %>"
                                                    data-in-cart="<%= variant.inCart ? 'true' : 'false' %>">
                                                <%= variant.type %> - ₹<%= variant.price %>
                                            </option>
                                        <% }) %>
                                    <% } else { %>
                                        <option value="default">No variants available</option>
                                    <% } %>
                                </select>
                                <button 
                                    class="add-to-cart-btn w-full bg-gradient-to-r from-gray-900 to-gray-800 text-white py-2 text-xs uppercase hover:from-gray-800 hover:to-gray-700 transition-all duration-300 font-serif rounded-lg group" 
                                    onclick="event.preventDefault(); event.stopPropagation(); handleCart('<%= similar._id %>', this);"
                                    data-product-id="<%= similar._id %>"
                                    data-action="<%= similar.variants[0].inCart ? 'remove' : 'add' %>">
                                    <%= similar.variants[0].inCart ? 'Remove from Cart' : 'Add to Cart' %>
                                    <span class="inline-block transform group-hover:translate-x-1 transition-transform duration-300 ml-1">→</span>
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </section>
</div>

<%- include("../partials/footer") %>

<style>
.image-zoom-container {
    position: relative;
    width: 100%;
    height: 550px;
    overflow: hidden;
    cursor: zoom-in;
}

.image-zoom-container img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.zoom-lens {
    position: absolute;
    border: 2px solid #8B4513;
    width: 150px;
    height: 150px;
    cursor: none;
    background-color: rgba(139, 69, 19, 0.1);
    display: none;
    z-index: 10;
    pointer-events: none;
}

.zoom-result {
    position: absolute;
    top: 0;
    left: 100%;
    margin-left: 20px;
    width: 450px;
    height: 450px;
    border: 2px solid #8B4513;
    background-color: white;
    display: none;
    z-index: 10;
    overflow: hidden;
}

.zoom-result img {
    position: absolute;
    width: 900px;
    height: 900px;
    object-fit: cover;
    pointer-events: none;
}

.thumbnail-img {
    transition: all 0.3s ease;
}

.thumbnail-img:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

#variantSelect {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%238B4513'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1.5em;
    padding-right: 2.5rem;
    appearance: none;
}

#cartBtn, #buyNowBtn {
    transition: all 0.3s ease;
}

#cartBtn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(139, 69, 19, 0.2);
}

#buyNowBtn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(139, 69, 19, 0.1);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get the variant select element
    const variantSelect = document.getElementById('variantSelect');
    
    // Store all variants' specifications
    const variantsSpecs = {};
    Array.from(variantSelect.options).forEach(option => {
        const index = option.value;
        variantsSpecs[index] = JSON.parse(option.getAttribute('data-specs') || '[]');
    });
    
    // Function to update product details when variant changes
    function updateVariantDetails() {
        const selectedOption = variantSelect.options[variantSelect.selectedIndex];
        const selectedIndex = selectedOption.value;
        
        // Get variant data from data attributes
        const price = parseFloat(selectedOption.getAttribute('data-price'));
        const discount = parseFloat(selectedOption.getAttribute('data-discount'));
        const stock = parseInt(selectedOption.getAttribute('data-stock'));
        const inCart = selectedOption.getAttribute('data-in-cart') === 'true';
        
        // Calculate discounted price
        const discountedPrice = Math.round(price * (1 - discount/100));

        // Update price display
        const currentPriceElement = document.getElementById('currentPrice');
        const originalPriceElement = document.getElementById('originalPrice');
        const discountBadge = document.getElementById('discountBadge');
        
        currentPriceElement.textContent = '₹' + discountedPrice;
        originalPriceElement.textContent = '₹' + price;
    
        // Update discount badge
        if (discount > 0) {
            discountBadge.textContent = discount + '% OFF';
            discountBadge.style.display = 'block';
        } else {
            discountBadge.style.display = 'none';
        }
    
        // Update stock status
        const stockStatus = document.getElementById('stockStatus');
        const cartBtn = document.getElementById('cartBtn');
        const buyNowBtn = document.getElementById('buyNowBtn');
        
        if (stock > 0) {
            stockStatus.innerHTML = '<span class="text-green-600">In Stock (' + stock + ' available)</span>';
            cartBtn.disabled = false;
            buyNowBtn.disabled = false;
            cartBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
            cartBtn.classList.add(inCart ? 'bg-red-600 hover:bg-red-700' : 'bg-[#8B4513] hover:bg-[#6B3513]');
        } else {
            stockStatus.innerHTML = '<span class="text-red-600">Out of Stock</span>';
            cartBtn.disabled = true;
            buyNowBtn.disabled = true;
            cartBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
            cartBtn.classList.remove('bg-red-600', 'bg-[#8B4513]');
        }
        
        // Update cart button
        cartBtn.textContent = inCart ? 'Remove from Cart' : 'Add to Cart';
        cartBtn.setAttribute('data-action', inCart ? 'remove' : 'add');
        
        // Update cart button colors
        if (stock > 0) {
            cartBtn.disabled = false;
            cartBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
            if (inCart) {
                cartBtn.classList.remove('bg-[#8B4513]', 'hover:bg-[#6B3513]');
                cartBtn.classList.add('bg-red-600', 'hover:bg-red-700');
            } else {
                cartBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
                cartBtn.classList.add('bg-[#8B4513]', 'hover:bg-[#6B3513]');
            }
        } else {
            cartBtn.disabled = true;
            cartBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
            cartBtn.classList.remove('bg-[#8B4513]', 'hover:bg-[#6B3513]', 'bg-red-600', 'hover:bg-red-700');
        }
        
        // Update specifications using stored specs
        const specsList = document.getElementById('specsList');
        specsList.innerHTML = ''; // Clear existing specifications
        
        const currentSpecs = variantsSpecs[selectedIndex];
        if (currentSpecs && currentSpecs.length > 0) {
            currentSpecs.forEach(spec => {
                const li = document.createElement('li');
                li.className = 'spec-item text-gray-600';
                li.textContent = spec;
                specsList.appendChild(li);
            });
        } else {
            const li = document.createElement('li');
            li.className = 'spec-item text-gray-600';
            li.textContent = 'No specifications available';
            specsList.appendChild(li);
        }

        // Update wishlist button state
        const wishlistBtn = document.getElementById('wishlistBtn');
        const wishlistIcon = wishlistBtn.querySelector('i');
        const inWishlist = selectedOption.getAttribute('data-in-wishlist') === 'true';
        
        if (inWishlist) {
            wishlistIcon.classList.remove('far', 'text-gray-400');
            wishlistIcon.classList.add('fas', 'text-red-500');
        } else {
            wishlistIcon.classList.remove('fas', 'text-red-500');
            wishlistIcon.classList.add('far', 'text-gray-400');
        }
    }
    
    // Add change event listener to variant select
    if (variantSelect) {
        variantSelect.addEventListener('change', updateVariantDetails);
    }
    
    // Initialize image zoom functionality
    const mainImage = document.getElementById('mainImage');
    const container = document.querySelector('.image-zoom-container');
    
    if (container && mainImage) {
        // Create zoom lens
        const zoomLens = document.createElement('div');
        zoomLens.className = 'zoom-lens';
        container.appendChild(zoomLens);

        // Create zoom result container
        const zoomResult = document.createElement('div');
        zoomResult.className = 'zoom-result';
        container.appendChild(zoomResult);

        // Create zoomed image
        const zoomedImg = document.createElement('img');
        zoomedImg.src = mainImage.src;
        zoomResult.appendChild(zoomedImg);

        // Handle mouse movement
        container.addEventListener('mousemove', function(e) {
            const rect = container.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // Calculate lens position
            let lensX = x - zoomLens.offsetWidth / 2;
            let lensY = y - zoomLens.offsetHeight / 2;
            
            // Keep lens within bounds
            const maxX = rect.width - zoomLens.offsetWidth;
            const maxY = rect.height - zoomLens.offsetHeight;
            
            lensX = Math.min(Math.max(0, lensX), maxX);
            lensY = Math.min(Math.max(0, lensY), maxY);
            
            // Update lens position
            zoomLens.style.left = lensX + 'px';
            zoomLens.style.top = lensY + 'px';
            
            // Calculate zoomed image position
            const zoomRatio = 6; // Increased zoom ratio for better visibility
            const zoomedX = -(lensX * zoomRatio);
            const zoomedY = -(lensY * zoomRatio);
            
            // Update zoomed image position
            zoomedImg.style.transform = `translate(${zoomedX}px, ${zoomedY}px)`;
        });
        
        // Show/hide zoom elements
        container.addEventListener('mouseenter', function() {
            zoomLens.style.display = 'block';
            zoomResult.style.display = 'block';
        });
        
        container.addEventListener('mouseleave', function() {
            zoomLens.style.display = 'none';
            zoomResult.style.display = 'none';
        });

        // Update zoom image when main image changes
        function updateZoomImage(src) {
            mainImage.src = src;
            zoomedImg.src = src;
            zoomedImg.style.transform = 'translate(0, 0)';
        }

        // Add click event to thumbnails
        const thumbnails = document.querySelectorAll('.thumbnail-img');
        thumbnails.forEach(thumb => {
            thumb.addEventListener('click', function() {
                updateZoomImage(this.src);
            });
        });

        // Update zoom on window resize
        window.addEventListener('resize', function() {
            if (zoomLens.style.display === 'block') {
                const rect = container.getBoundingClientRect();
                const x = parseFloat(zoomLens.style.left);
                const y = parseFloat(zoomLens.style.top);
                
                // Recalculate bounds
                const maxX = rect.width - zoomLens.offsetWidth;
                const maxY = rect.height - zoomLens.offsetHeight;
                
                // Update lens position if needed
                zoomLens.style.left = Math.min(Math.max(0, x), maxX) + 'px';
                zoomLens.style.top = Math.min(Math.max(0, y), maxY) + 'px';
            }
        });
    }
});

// Function to update main image
function updateMainImage(src) {
    const mainImage = document.getElementById('mainImage');
    if (mainImage) {
        mainImage.src = src;
        
        // Update zoom image
        const zoomedImg = document.querySelector('.zoom-result img');
        if (zoomedImg) {
            zoomedImg.src = src;
        }
        
        // Hide zoom elements
        const zoomLens = document.querySelector('.zoom-lens');
        if (zoomLens) zoomLens.style.display = 'none';
    }
}

function handleCart(productId, button) {
    const cartBtn = button || document.getElementById('cartBtn');
    const action = cartBtn.getAttribute('data-action');
    const variantSelect = document.getElementById('variantSelect');
    const selectedOption = variantSelect.options[variantSelect.selectedIndex];
    
    fetch('/cart/add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            productId: productId,
            action: action,
            variantType: selectedOption.getAttribute('data-type')
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update cart count in navbar
            const cartCount = document.getElementById('cartCount');
            if (cartCount) {
                cartCount.textContent = data.cartCount;
            }
            
            // Update button state and colors
            if (action === 'add') {
                // Change to Remove from Cart state
                cartBtn.textContent = 'Remove from Cart';
                cartBtn.setAttribute('data-action', 'remove');
                cartBtn.classList.remove('bg-[#8B4513]', 'hover:bg-[#6B3513]');
                cartBtn.classList.add('bg-red-500', 'hover:bg-red-600');
                selectedOption.setAttribute('data-in-cart', 'true');
            } else {
                // Change to Add to Cart state
                cartBtn.textContent = 'Add to Cart';
                cartBtn.setAttribute('data-action', 'add');
                cartBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
                cartBtn.classList.add('bg-[#8B4513]', 'hover:bg-[#6B3513]');
                selectedOption.setAttribute('data-in-cart', 'false');
            }
            
            // Show success message
            Swal.fire({
                icon: 'success',
                title: action === 'add' ? 'Added to Cart!' : 'Removed from Cart!',
                showConfirmButton: false,
                timer: 1500
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Something went wrong!'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong!'
        });
    });
}

// Add event listener for cart button
document.addEventListener('DOMContentLoaded', function() {
    const cartBtn = document.getElementById('cartBtn');
    if (cartBtn) {
        const initialAction = cartBtn.getAttribute('data-action');
        if (initialAction === 'remove') {
            cartBtn.classList.remove('bg-[#8B4513]', 'hover:bg-[#6B3513]');
            cartBtn.classList.add('bg-red-500', 'hover:bg-red-600');
        } else {
            cartBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
            cartBtn.classList.add('bg-[#8B4513]', 'hover:bg-[#6B3513]');
        }
    }
});

async function toggleWishlist(productId, button = null) {
    let variantType;
    let selectedVariant;
    
    if (button) {
        // For similar products
        variantType = button.getAttribute('data-variant-type');
        const variantSelect = document.querySelector(`.variant-select[data-product-id="${productId}"]`);
        selectedVariant = variantSelect.options[variantSelect.selectedIndex];
    } else {
        // For main product
        const variantSelect = document.getElementById('variantSelect');
        selectedVariant = variantSelect.options[variantSelect.selectedIndex];
        variantType = selectedVariant.getAttribute('data-type');
    }

    if (!variantType) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please select a variant first',
            confirmButtonColor: '#000',
            showConfirmButton: false,
            timer: 2000
        });
        return;
    }

    try {
        const response = await fetch(`/wishlist/toggle/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                variantType
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            let wishlistBtn;
            let wishlistIcon;
            
            if (button) {
                wishlistBtn = button;
                wishlistIcon = button.querySelector('i');
            } else {
                wishlistBtn = document.getElementById('wishlistBtn');
                wishlistIcon = wishlistBtn.querySelector('i');
            }
            
            if (data.added) {
                wishlistIcon.classList.remove('far', 'text-gray-400');
                wishlistIcon.classList.add('fas', 'text-red-500');
            } else {
                wishlistIcon.classList.remove('fas', 'text-red-500');
                wishlistIcon.classList.add('far', 'text-gray-400');
            }

            // Update variant's wishlist status
            if (selectedVariant) {
                selectedVariant.setAttribute('data-in-wishlist', data.added.toString());
            }

            // Update wishlist count in navbar
            const navbarWishlistIcon = document.querySelector('.fa-heart').parentElement;
            let wishlistBadge = navbarWishlistIcon.querySelector('.cart-badge');
            
            if (data.wishlistCount > 0) {
                if (!wishlistBadge) {
                    wishlistBadge = document.createElement('span');
                    wishlistBadge.className = 'cart-badge absolute -top-1 -right-1 rounded-full flex items-center justify-center';
                    navbarWishlistIcon.appendChild(wishlistBadge);
                }
                wishlistBadge.textContent = data.wishlistCount;
            } else if (wishlistBadge) {
                wishlistBadge.remove();
            }

            await Swal.fire({
                icon: data.added ? 'success' : 'info',
                title: data.added ? 'Added to Wishlist' : 'Removed from Wishlist',
                text: data.added ? 'This product has been added to your wishlist' : 'This product has been removed from your wishlist',
                confirmButtonColor: '#000',
                showConfirmButton: false,
                timer: 2000
            });
        } else {
            throw new Error(data.message || 'Something went wrong');
        }
    } catch (error) {
        console.error('Error toggling wishlist:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update wishlist. Please try again.',
            confirmButtonColor: '#000',
            showConfirmButton: false,
            timer: 2000
        });
    }
}
</script>

