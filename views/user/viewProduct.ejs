<%- include("../partials/navbar") %>

<div class="container mx-auto px-4 py-8">
    <!-- Main Product Section -->
    <section class="flex flex-col md:flex-row gap-8">
        <!-- Image Gallery -->
        <div class="w-full md:w-1/2 flex gap-4">
            <!-- Thumbnails -->
            <div class="flex flex-col gap-4">
                <% product.images.forEach((image, index) => { %>
                    <img 
                        src="<%= image.path %>" 
                        alt="<%= product.name %> thumbnail" 
                        class="w-20 h-20 object-cover cursor-pointer thumbnail-img"
                        onclick="updateMainImage(this.src)"
                    >
                <% }) %>
            </div>

            <!-- Main Image -->
            <div class="flex-grow relative overflow-hidden">
                <div class="image-zoom-container w-full">
                    <img 
                        id="mainImage" 
                        src="<%= product.images[0].path %>" 
                        alt="<%= product.name %>" 
                        class="w-full h-auto object-cover rounded-lg"
                    >
                </div>
            </div>
        </div>

        <!-- Product Details -->
        <div class="w-full md:w-1/2 space-y-6">
            <div class="flex items-center justify-between mb-4">
                <h1 class="text-3xl font-bold"><%= product.name %></h1>
                <button id="wishlistBtn" class="focus:outline-none" onclick="toggleWishlist('<%= product._id %>')">
                    <i class="fas fa-heart text-2xl <%= isInWishlist ? 'text-red-500' : 'text-gray-400' %>"></i>
                </button>
            </div>
            <p class="text-gray-600"><%= product.description %></p>
            
            <div class="space-y-2">
                <p class="font-semibold">Brand: <span class="text-gray-600"><%= product.brand %></span></p>
                <p class="font-semibold">Color: <span class="text-gray-600"><%= product.color %></span></p>
                <p class="font-semibold">Category: <span class="text-gray-600"><%= product.categoryData[0].name %></span></p>
            </div>

            <!-- Variant Selection -->
            <div class="space-y-4">
                <label class="block font-semibold">Select Variant:</label>
                <select id="variantSelect" class="w-full p-2 border rounded" onchange="updateVariantDetails()">
                    <% product.variants.forEach((variant, index) => { %>
                        <option value="<%= index %>" 
                                data-type="<%= variant.type %>"
                                data-price="<%= variant.price %>"
                                data-stock="<%= variant.stock %>"
                                data-discount="<%= variant.discount %>"
                                data-offer-name="<%= variant.offerName %>"
                                data-specs='<%= JSON.stringify(variant.specifications || []) %>'
                                data-in-cart="<%= variant.inCart %>">
                            <%= variant.type %> 
                        </option>
                    <% }) %>
                </select>
            </div>

            <!-- Price Display -->
            <div class="space-y-2">
                <div class="flex items-center gap-4 flex-wrap">
                    <% const firstVariant = product.variants[0]; %>
                    <% const discountedPrice = Math.round(firstVariant.price * (1 - firstVariant.discount/100)); %>
                    <div class="flex items-baseline gap-3">
                        <span id="currentPrice" class="text-3xl font-bold text-gray-900">₹<%= discountedPrice %></span>
                        <% if (firstVariant.discount > 0) { %>
                            <span id="originalPrice" class="text-xl text-gray-500 line-through">₹<%= firstVariant.price %></span>
                        <% } %>
                    </div>
                    <% if (firstVariant.discount > 0) { %>
                        <span id="discountBadge" class="px-2 py-1 bg-red-100 text-red-700 rounded-md text-sm font-medium">
                            <%= firstVariant.discount %>% OFF
                        </span>
                    <% } %>
                </div>
                <p id="stockStatus" class="font-medium mt-2"></p>
            </div>

            <!-- Specifications -->
            <div class="space-y-2">
                <h3 class="font-semibold">Specifications:</h3>
                <ul id="specsList" class="list-disc list-inside text-gray-600">
                    <% if (product.variants[0].specifications && product.variants[0].specifications.length > 0) { %>
                        <% product.variants[0].specifications.forEach(spec => { %>
                            <li class="mb-1"><%= spec %></li>
                        <% }); %>
                    <% } else { %>
                        <li>No specifications available</li>
                    <% } %>
                </ul>
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-4">
                <button id="cartBtn" onclick="handleCart('<%= product._id %>')" 
                        class="flex-1 bg-black text-white py-3 rounded-lg hover:bg-gray-800 transition-colors disabled:bg-gray-400">
                    Add to Cart
                </button>
                <button id="buyNowBtn" onclick="buyNow('<%= product._id %>')" 
                        class="flex-1 border-2 border-black py-3 rounded-lg hover:bg-gray-100 transition-colors disabled:border-gray-400 disabled:text-gray-400">
                    Buy Now
                </button>
            </div>
        </div>
    </section>

    <!-- Similar Products -->
    <section class="mt-16">
        <h2 class="text-2xl font-bold mb-6">Similar Products</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <% similarProducts.forEach(similar => { %>
                <div class="border rounded-lg overflow-hidden group cursor-pointer hover:shadow-lg transition-shadow"
                     onclick="window.location.href='/product/view/<%= similar._id %>'">
                    <div class="aspect-w-1 aspect-h-1 overflow-hidden">
                        <img 
                            src="<%= similar.images[0].path %>" 
                            alt="<%= similar.name %>" 
                            class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                        >
                    </div>
                    <div class="p-4 space-y-2">
                        <h3 class="font-semibold text-lg truncate"><%= similar.name %></h3>
                        <p class="text-gray-600"><%= similar.brand %></p>
                        
                        <div class="flex items-center gap-2">
                            <% const similarVariant = similar.variants[0]; %>
                            <% 
                            // Only show discounts from offers, not from product model
                            const hasOffer = similarVariant.offerName && similarVariant.discount > 0;
                            const similarDiscountedPrice = hasOffer ? 
                                Math.round(similarVariant.price * (1 - similarVariant.discount/100)) : 
                                similarVariant.price; 
                            %>
                            <span class="text-lg font-bold">₹<%= similarDiscountedPrice %></span>
                            <% if (hasOffer) { %>
                                <span class="text-sm text-gray-500 line-through">₹<%= similarVariant.price %></span>
                                <span class="text-sm text-red-600 font-medium">
                                    (<%= similarVariant.discount %>% OFF<%= similarVariant.offerName ? ` - ${similarVariant.offerName}` : '' %>)
                                </span>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    </section>
</div>

<%- include("../partials/footer") %>

<style>
.image-zoom-container {
    position: relative;
    overflow: hidden;
    cursor: zoom-in;
}

.image-zoom-container img {
    transition: transform 0.3s ease;
    transform-origin: center center;
}

.zoomed {
    position: relative;
    transform: scale(2);
}
</style>

<script>
function updateMainImage(src) {
    const mainImage = document.getElementById('mainImage');
    mainImage.src = src;
    // Reset zoom state when changing images
    mainImage.classList.remove('zoomed');
    mainImage.style.transformOrigin = 'center center';
}

function updateCartButton(inCart) {
    const cartBtn = document.getElementById('cartBtn');
    if (inCart) {
        cartBtn.textContent = 'Remove from Cart';
        cartBtn.classList.remove('bg-black');
        cartBtn.classList.add('bg-red-600', 'hover:bg-red-700');
    } else {
        cartBtn.textContent = 'Add to Cart';
        cartBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
        cartBtn.classList.add('bg-black');
    }
}

function updateVariantDetails() {
    const select = document.getElementById('variantSelect');
    const option = select.options[select.selectedIndex];
    
    const price = parseInt(option.getAttribute('data-price'));
    const stock = parseInt(option.getAttribute('data-stock'));
    const specs = JSON.parse(option.getAttribute('data-specs') || '[]');
    const type = option.getAttribute('data-type');
    const discount = parseInt(option.getAttribute('data-discount') || '0');
    const offerName = option.getAttribute('data-offer-name');
    const inCart = option.getAttribute('data-in-cart') === 'true';
    
    // Calculate discounted price
    const discountedPrice = Math.round(price * (1 - discount/100));

    // Update prices and discount
    const priceDisplay = document.getElementById('currentPrice');
    const originalPriceDisplay = document.getElementById('originalPrice');
    const discountBadge = document.getElementById('discountBadge');

    priceDisplay.textContent = `₹${discountedPrice}`;
    
    if (discount > 0) {
        // Show original price with strikethrough
        originalPriceDisplay.textContent = `₹${price}`;
        originalPriceDisplay.style.display = 'inline';
        
        // Show discount badge with offer name if available
        let discountText = `${discount}% OFF`;
        if (offerName) {
            discountText += ` (${offerName})`;
        }
        discountBadge.textContent = discountText;
        discountBadge.style.display = 'inline-block';
    } else {
        // Hide original price and discount badge if no discount
        originalPriceDisplay.style.display = 'none';
        discountBadge.style.display = 'none';
    }
    
    // Update stock status
    const stockStatus = document.getElementById('stockStatus');
    if (stock > 0) {
        stockStatus.textContent = `In Stock (${stock} available)`;
        stockStatus.className = 'font-medium text-green-600 mt-2';
    } else {
        stockStatus.textContent = 'Out of Stock';
        stockStatus.className = 'font-medium text-red-600 mt-2';
    }
    
    // Update specifications
    const specsList = document.getElementById('specsList');
    specsList.innerHTML = '';
    
    if (specs && specs.length > 0) {
        specs.forEach(spec => {
            const li = document.createElement('li');
            li.textContent = spec;
            li.className = 'mb-1';
            specsList.appendChild(li);
        });
    } else {
        specsList.innerHTML = '<li>No specifications available</li>';
    }

    // Update button states
    const addToCartBtn = document.getElementById('cartBtn');
    const buyNowBtn = document.getElementById('buyNowBtn');
    
    if (stock === 0) {
        addToCartBtn.disabled = true;
        buyNowBtn.disabled = true;
    } else {
        addToCartBtn.disabled = false;
        buyNowBtn.disabled = false;
    }

    // Update cart button state for this specific variant
    updateCartButton(inCart);
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    try {
        console.log('DOM loaded, initializing product details');
        
        // Initialize zoom functionality
        setupZoom();
        
        // Initialize variant selection
        const variantSelect = document.getElementById('variantSelect');
        const firstVariantOption = variantSelect.options[0];
        
        // Set up cart status for variants
        const variants = JSON.parse('<%= JSON.stringify(product.variants) %>'.replace(/&quot;/g, '"'));
        console.log('Product variants:', variants);
        
        if (variants && variants.length > 0) {
            console.log('First variant specs:', variants[0].specifications);
            
            // Update data attributes for each variant option
            variants.forEach((variant, index) => {
                if (index < variantSelect.options.length) {
                    const option = variantSelect.options[index];
                    option.setAttribute('data-in-cart', variant.inCart);
                    
                    // Debug specs from data attribute
                    const specsData = option.getAttribute('data-specs');
                    console.log(`Variant ${index} specs data attribute:`, specsData);
                }
            });
            
            // Manually initialize the specifications display for the first variant
            const firstVariantSpecs = variants[0].specifications || [];
            console.log('Initializing with specs:', firstVariantSpecs);
            
            // Force update variant details
            updateVariantDetails();
        }
    } catch (err) {
        console.error('Error initializing product page:', err);
    }
});

function setupZoom() {
    const container = document.querySelector('.image-zoom-container');
    const img = document.getElementById('mainImage');
    
    container.addEventListener('mousemove', function(e) {
        if (!img.classList.contains('zoomed')) {
            img.classList.add('zoomed');
        }
        
        const rect = container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // Calculate the position in percentages
        const xPercent = (x / rect.width) * 100;
        const yPercent = (y / rect.height) * 100;
        
        // Update transform origin based on mouse position
        img.style.transformOrigin = `${xPercent}% ${yPercent}%`;
    });
    
    container.addEventListener('mouseleave', function() {
        img.classList.remove('zoomed');
        img.style.transformOrigin = 'center center';
    });
}

async function handleCart(productId) {
    try {
        const variantSelect = document.getElementById('variantSelect');
        const selectedVariant = variantSelect.options[variantSelect.selectedIndex];
        const variantType = selectedVariant.getAttribute('data-type');
        const inCart = selectedVariant.getAttribute('data-in-cart') === 'true';

        const endpoint = inCart ? '/cart/remove' : '/cart/add';
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId,
                variantType
            })
        });

        const data = await response.json();

        if (data.success) {
            // Update only the current variant's cart status
            selectedVariant.setAttribute('data-in-cart', !inCart);
            updateCartButton(!inCart);
            
            // Trigger cart updated event
            document.dispatchEvent(new CustomEvent('cartUpdated'));

            // Show success message with specific variant info
            Swal.fire({
                icon: 'success',
                title: inCart ? 'Removed from Cart!' : 'Added to Cart!',
                text: `${variantType} ${inCart ? 'removed from' : 'added to'} cart successfully`,
                showConfirmButton: false,
                timer: 1500
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Failed to update cart'
        });
    }
}

async function buyNow(productId) {
    try {
        const variantSelect = document.getElementById('variantSelect');
        const selectedVariant = variantSelect.options[variantSelect.selectedIndex];
        const variantType = selectedVariant.getAttribute('data-type');

        // First add to cart
        await handleCart(productId);
        
        // Then redirect to checkout
        window.location.href = '/checkout';
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Failed to process purchase'
        });
    }
}

function toggleWishlist(productId) {
    fetch(`/wishlist/toggle/${productId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const wishlistBtn = document.getElementById('wishlistBtn').querySelector('i');
            
            if (data.added) {
                // Product was added to wishlist
                wishlistBtn.classList.remove('text-gray-400');
                wishlistBtn.classList.add('text-red-500');
                
                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Added to Wishlist',
                    text: 'This product has been added to your wishlist',
                    confirmButtonColor: '#3085d6',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            } else {
                // Product was removed from wishlist
                wishlistBtn.classList.remove('text-red-500');
                wishlistBtn.classList.add('text-gray-400');
                
                // Show removed message
                Swal.fire({
                    icon: 'info',
                    title: 'Removed from Wishlist',
                    text: 'This product has been removed from your wishlist',
                    confirmButtonColor: '#3085d6',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        } else {
            // Show error message
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Something went wrong',
                confirmButtonColor: '#3085d6'
            });
        }
    })
    .catch(error => {
        console.error('Error toggling wishlist:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update wishlist. Please try again.',
            confirmButtonColor: '#3085d6'
        });
    });
}
</script>
