<%- include('../partials/navbar') %>

<div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
    <div class="container mx-auto px-4 py-12">
        <div class="flex flex-col lg:flex-row gap-8">
            <!-- Sidebar -->
            <div class="lg:w-1/4">
                <%- include('../partials/profileSidebar') %>
            </div>

            <!-- Main Content -->
            <div class="lg:w-3/4">
                <h1 class="text-3xl font-serif font-bold mb-8 text-gray-800">My Wallet</h1>

                <!-- Wallet Balance Card -->
                <div class="bg-gradient-to-r from-gray-900 to-gray-800 rounded-2xl shadow-xl p-8 mb-8 transform transition-all duration-300 hover:scale-[1.02]">
                    <div class="flex justify-between items-center">
                        <div>
                            <p class="text-gray-400 font-medium mb-2">Available Balance</p>
                            <h2 class="text-4xl font-serif font-bold text-white">₹<%= wallet.balance.toFixed(2) %></h2>
                        </div>
                        <button onclick="addFunds()" 
                                class="bg-white text-gray-900 px-8 py-3 rounded-xl font-medium hover:bg-gray-100 transition-all duration-300 transform hover:scale-105 shadow-lg">
                            Add Funds
                        </button>
                    </div>
                </div>

                <!-- Transaction History -->
                <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
                    <div class="p-6 border-b border-gray-100">
                        <h3 class="text-2xl font-serif font-semibold text-gray-800">Transaction History</h3>
                    </div>

                    <div class="divide-y divide-gray-100">
                        <% if (wallet.transactions && wallet.transactions.length > 0) { %>
                            <% wallet.transactions.forEach(transaction => { %>
                                <div class="p-6 hover:bg-gray-50 transition-colors duration-200">
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <p class="font-medium text-gray-800 mb-1">
                                                <% if (transaction.description.includes('Refund for cancelled order')) { %>
                                                    Refund for cancelled order <%= transaction.description.split('(')[0].split('-')[0] %>... (<%= transaction.description.split('(')[1] %>
                                                <% } else { %>
                                                    <%= transaction.description %>
                                                <% } %>
                                            </p>
                                            <p class="text-sm text-gray-500">
                                                <%= new Date(transaction.date).toLocaleDateString('en-IN', {
                                                    year: 'numeric',
                                                    month: 'short',
                                                    day: 'numeric',
                                                    hour: '2-digit',
                                                    minute: '2-digit'
                                                }) %>
                                            </p>
                                        </div>
                                        <div class="text-right">
                                            <p class="font-semibold text-lg <%= transaction.type === 'CREDIT' ? 'text-green-600' : 'text-red-600' %>">
                                                <%= transaction.type === 'CREDIT' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                            
                            <!-- Pagination Controls -->
                            <% if (pagination && pagination.totalPages > 1) { %>
                                <div class="flex justify-center items-center p-6 border-t border-gray-100">
                                    <nav class="flex items-center space-x-2">
                                        <!-- Previous Button -->
                                        <% if (pagination.hasPrevPage) { %>
                                            <a href="/wallet?page=<%= pagination.prevPage %>" 
                                               class="p-2 bg-white text-gray-700 rounded-lg hover:bg-gray-50 transition-colors border border-gray-200">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                                </svg>
                                            </a>
                                        <% } else { %>
                                            <span class="p-2 bg-gray-50 text-gray-400 rounded-lg cursor-not-allowed border border-gray-200">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                                </svg>
                                            </span>
                                        <% } %>
                                        
                                        <!-- Page Numbers -->
                                        <% 
                                            let startPage = Math.max(1, pagination.currentPage - 2);
                                            let endPage = Math.min(pagination.totalPages, startPage + 4);
                                            if (endPage - startPage < 4) {
                                                startPage = Math.max(1, endPage - 4);
                                            }
                                        %>
                                        
                                        <% for (let i = startPage; i <= endPage; i++) { %>
                                            <a href="/wallet?page=<%= i %>" 
                                               class="px-4 py-2 <%= pagination.currentPage === i ? 'bg-gray-900 text-white' : 'bg-white text-gray-700 hover:bg-gray-50' %> rounded-lg transition-colors border border-gray-200">
                                                <%= i %>
                                            </a>
                                        <% } %>
                                        
                                        <!-- Next Button -->
                                        <% if (pagination.hasNextPage) { %>
                                            <a href="/wallet?page=<%= pagination.nextPage %>" 
                                               class="p-2 bg-white text-gray-700 rounded-lg hover:bg-gray-50 transition-colors border border-gray-200">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                                </svg>
                                            </a>
                                        <% } else { %>
                                            <span class="p-2 bg-gray-50 text-gray-400 rounded-lg cursor-not-allowed border border-gray-200">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                                </svg>
                                            </span>
                                        <% } %>
                                    </nav>
                                </div>
                                
                                <!-- Transaction Count Summary -->
                                <div class="text-center text-sm text-gray-500 p-4 bg-gray-50 border-t border-gray-100">
                                    Showing <%= Math.min((pagination.currentPage - 1) * 10 + 1, pagination.totalTransactions) %> to 
                                    <%= Math.min(pagination.currentPage * 10, pagination.totalTransactions) %> 
                                    of <%= pagination.totalTransactions %> transactions
                                </div>
                            <% } %>
                        <% } else { %>
                            <div class="p-12 text-center">
                                <div class="text-gray-400 mb-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                                    </svg>
                                </div>
                                <p class="text-gray-600 text-lg">No transactions found</p>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Razorpay Script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Add Funds Function -->
<script>
async function addFunds() {
    try {
        const { value: amount } = await Swal.fire({
            title: 'Add Funds to Wallet',
            input: 'number',
            inputLabel: 'Enter Amount (₹)',
            inputPlaceholder: 'Enter amount',
            showCancelButton: true,
            customClass: {
                popup: 'rounded-2xl',
                title: 'text-xl font-serif',
                input: 'rounded-xl',
                confirmButton: 'bg-gray-900 hover:bg-gray-800 rounded-xl',
                cancelButton: 'bg-gray-100 hover:bg-gray-200 rounded-xl'
            },
            inputValidator: (value) => {
                if (!value || value < 1) {
                    return 'Please enter a valid amount (minimum ₹1)';
                }
            }
        });

        if (amount) {
            console.log('Amount entered:', amount);

            const orderResponse = await fetch('/wallet/create-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount: amount * 100 })
            });

            console.log('Order response status:', orderResponse.status);

            const orderData = await orderResponse.json();
            console.log('Order data:', orderData);

            if (!orderData.success) {
                throw new Error(orderData.error || 'Failed to create order');
            }

            const options = {
                key: '<%= razorpayKeyId %>',
                amount: amount * 100,
                currency: 'INR',
                name: 'Royal Monarch',
                description: 'Wallet Recharge',
                order_id: orderData.order.id,
                handler: async function (response) {
                    try {
                        const verifyResponse = await fetch('/wallet/verify-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                                amount: amount * 100
                            })
                        });

                        const verifyData = await verifyResponse.json();

                        if (verifyData.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Funds added successfully',
                                showConfirmButton: false,
                                timer: 1500,
                                customClass: {
                                    popup: 'rounded-2xl',
                                    title: 'text-xl font-serif'
                                }
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error(verifyData.error || 'Payment verification failed');
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to verify payment',
                            customClass: {
                                popup: 'rounded-2xl',
                                title: 'text-xl font-serif'
                            }
                        });
                    }
                },
                prefill: {
                    name: '<%= user.name %>',
                    email: '<%= user.email %>'
                },
                theme: {
                    color: '#000000'
                }
            };

            const rzp = new Razorpay(options);
            rzp.open();

        }
    } catch (error) {
        console.error('Error details:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to process payment',
            customClass: {
                popup: 'rounded-2xl',
                title: 'text-xl font-serif'
            }
        });
    }
}
</script>

<%- include('../partials/footer') %>
