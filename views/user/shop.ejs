<%- include("../partials/navbar") %>

<div class="container mx-auto px-4 pt-10 pb-8">
    <!-- Filters and Search Section -->
    <div class="mb-6 flex flex-wrap items-center justify-start gap-4">
        <!-- Search Input -->
        <div class="w-full sm:w-64">
            <input 
                type="text" 
                id="searchInput" 
                placeholder="Search products..." 
                class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300"
            >
        </div>
        
        <!-- Category Filter -->
        <div class="w-full sm:w-48">
            <select id="categoryFilter" class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300">
                <option value="">All Categories</option>
                <% categories.forEach(category => { %>
                    <option value="<%= category._id %>" <%= initialCategory === category._id.toString() ? 'selected' : '' %>>
                        <%= category.name %>
                    </option>
                <% }); %>
            </select>
        </div>
        
        <!-- Sort Options -->
        <div class="w-full sm:w-48">
            <select id="sortBy" class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300">
                <option value="createdAt:desc">Latest</option>
                <option value="price:asc">Price: Low to High</option>
                <option value="price:desc">Price: High to Low</option>
                <option value="name:asc">Name: A to Z</option>
                <option value="name:desc">Name: Z to A</option>
            </select>
        </div>
        
        <!-- Price Range -->
        <div class="w-full sm:w-48 flex gap-2">
            <input 
                type="number" 
                id="minPrice" 
                placeholder="Min Price" 
                class="w-1/2 p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300"
            >
            <input 
                type="number" 
                id="maxPrice" 
                placeholder="Max Price" 
                class="w-1/2 p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300"
            >
        </div>
    </div>

    <!-- Products Grid -->
    <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        <!-- Products will be loaded here -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="mt-8 flex justify-center space-x-2">
        <!-- Pagination will be loaded here -->
    </div>

    <!-- Loading Spinner -->
    <div id="loading" class="hidden">
        <div class="flex justify-center items-center h-32">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-[#8B4513]"></div>
        </div>
    </div>
</div>

<%- include("../partials/footer") %>

<script>
let currentPage = 1;
let currentFilters = {
    search: '',
    category: '<%= initialCategory %>',
    sortBy: 'createdAt',
    order: 'desc',
    minPrice: '',
    maxPrice: '',
    limit: 12
};

// Product card template
const createProductCard = (product) => `
    <a href="/product/view/${product._id}" class="block">
        <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden group">
            <div class="aspect-w-1 aspect-h-1 overflow-hidden">
                <img 
                    src="${product.images[0].path}" 
                    alt="${product.name}"
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                >
            </div>
            <div class="p-3">
                <h3 class="text-sm font-serif mb-1 text-[#2c2c2c] group-hover:text-[#8B4513] transition-colors duration-300">${product.name}</h3>
                <p class="text-gray-600 mb-2 font-serif text-xs">${product.brand}</p>
                <div class="flex justify-between items-center mb-2">
                    <div class="flex items-center gap-1">
                        <span class="text-base font-serif text-[#8B4513]">₹${product.discountedPrice}</span>
                        ${product.offer ? `
                            <span class="text-xs text-gray-500 line-through">₹${product.originalPrice}</span>
                            <span class="text-xs text-[#8B4513] font-serif ml-1">${product.offer.discount}% OFF</span>
                        ` : ''}
                    </div>
                    <span class="text-gray-600 hover:text-[#8B4513] transition-colors">
                        <i class="fas fa-eye text-sm"></i>
                    </span>
                </div>
                <div class="flex flex-col gap-1.5">
                    <select class="variant-select w-full p-1 text-xs border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300" data-product-id="${product._id}">
                        ${product.variants.map(variant => `
                            <option value="${variant.type}" data-stock="${variant.stock}">${variant.type}</option>
                        `).join('')}
                    </select>
                    <button 
                        class="add-to-cart-btn w-full bg-white text-[#8B4513] py-1 text-xs uppercase border border-[#8B4513] hover:bg-[#8B4513] hover:text-white transition-all duration-300 font-serif rounded-lg group" 
                        data-product-id="${product._id}">
                        Add to Cart
                        <span class="inline-block transform group-hover:translate-x-1 transition-transform duration-300 ml-1">→</span>
                    </button>
                </div>
            </div>
        </div>
    </a>
`;

// Create pagination buttons
const createPagination = (pagination) => {
    const { currentPage, totalPages } = pagination;
    let html = '';
    
    // Previous button
    html += `
        <button 
            class="px-4 py-2 border border-gray-300 rounded-lg ${!pagination.hasPrevPage ? 'opacity-50 cursor-not-allowed bg-gray-100' : 'hover:bg-[#8B4513] hover:text-white hover:border-[#8B4513] transition-colors duration-300'}" 
            ${!pagination.hasPrevPage ? 'disabled' : ''}
            onclick="${pagination.hasPrevPage ? `changePage(${currentPage - 1})` : ''}"
            title="Previous Page"
        >
            <i class="fas fa-chevron-left"></i>
        </button>
    `;
    
    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        if (i === currentPage) {
            html += `<button class="px-4 py-2 bg-[#8B4513] text-white rounded-lg">${i}</button>`;
        } else if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
            html += `<button class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-[#8B4513] hover:text-white hover:border-[#8B4513] transition-colors duration-300" onclick="changePage(${i})">${i}</button>`;
        } else if (i === currentPage - 2 || i === currentPage + 2) {
            html += `<span class="px-4 py-2">...</span>`;
        }
    }
    
    // Next button
    html += `
        <button 
            class="px-4 py-2 border border-gray-300 rounded-lg ${!pagination.hasNextPage ? 'opacity-50 cursor-not-allowed bg-gray-100' : 'hover:bg-[#8B4513] hover:text-white hover:border-[#8B4513] transition-colors duration-300'}" 
            ${!pagination.hasNextPage ? 'disabled' : ''}
            onclick="${pagination.hasNextPage ? `changePage(${currentPage + 1})` : ''}"
            title="Next Page"
        >
            <i class="fas fa-chevron-right"></i>
        </button>
    `;
    
    return html;
};

// Fetch products with filters
const fetchProducts = async () => {
    try {
        document.getElementById('loading').classList.remove('hidden');
        
        const queryString = new URLSearchParams({
            ...currentFilters,
            page: currentPage
        }).toString();
        
        const response = await fetch(`/shop/products?${queryString}`);
        const data = await response.json();
        
        if (data.success) {
            const productsGrid = document.getElementById('productsGrid');
            const paginationDiv = document.getElementById('pagination');
            
            productsGrid.innerHTML = data.products.map(createProductCard).join('');
            paginationDiv.innerHTML = createPagination(data.pagination);
        }
    } catch (error) {
        console.error('Error fetching products:', error);
    } finally {
        document.getElementById('loading').classList.add('hidden');
    }
};

// Event handlers
const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};

document.getElementById('searchInput').addEventListener('input', debounce((e) => {
    const searchTerm = e.target.value.trim();
    if (searchTerm) {
        // Search in both product name and brand
        currentFilters.search = searchTerm;
    } else {
        currentFilters.search = '';
    }
    currentPage = 1;
    fetchProducts();
}, 300));

document.getElementById('categoryFilter').addEventListener('change', (e) => {
    currentFilters.category = e.target.value;
    currentPage = 1;
    fetchProducts();
});

document.getElementById('sortBy').addEventListener('change', (e) => {
    const [sortBy, order] = e.target.value.split(':');
    currentFilters.sortBy = sortBy;
    currentFilters.order = order;
    currentPage = 1;
    fetchProducts();
});

document.getElementById('minPrice').addEventListener('input', debounce((e) => {
    const minPrice = parseFloat(e.target.value);
    if (!isNaN(minPrice) && minPrice >= 0) {
        currentFilters.minPrice = minPrice;
    } else {
        currentFilters.minPrice = '';
    }
    currentPage = 1;
    fetchProducts();
}, 500));

document.getElementById('maxPrice').addEventListener('input', debounce((e) => {
    const maxPrice = parseFloat(e.target.value);
    if (!isNaN(maxPrice) && maxPrice >= 0) {
        currentFilters.maxPrice = maxPrice;
    } else {
        currentFilters.maxPrice = '';
    }
    currentPage = 1;
    fetchProducts();
}, 500));

const changePage = (page) => {
    currentPage = page;
    fetchProducts();
    window.scrollTo({ top: 0, behavior: 'smooth' });
};

// Initial load
fetchProducts();

document.addEventListener('DOMContentLoaded', function() {
    // Delegate event listener for "Add to Cart" buttons that will be created dynamically
    document.getElementById('productsGrid').addEventListener('click', async function(event) {
        if (event.target.classList.contains('add-to-cart-btn') || 
            (event.target.parentElement && event.target.parentElement.classList.contains('add-to-cart-btn'))) {
            
            const button = event.target.classList.contains('add-to-cart-btn') ? 
                event.target : event.target.parentElement;
            
            const productId = button.getAttribute('data-product-id');
            const variantSelect = document.querySelector(`.variant-select[data-product-id="${productId}"]`);
            const variantType = variantSelect.value;
            const stock = variantSelect.options[variantSelect.selectedIndex].getAttribute('data-stock');
            
            // Check if product is in stock
            if (parseInt(stock) <= 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Out of Stock',
                    text: 'This variant is currently out of stock'
                });
                return;
            }
            
            try {
                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        variantType
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Trigger cart updated event
                    document.dispatchEvent(new CustomEvent('cartUpdated'));
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Added to Cart!',
                        text: `${variantType} added to cart successfully`,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'Failed to add to cart'
                });
            }
        }
    });
});
</script>
