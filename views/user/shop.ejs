<%- include("../partials/navbar") %>

<div class="container mx-auto px-4 pt-10 pb-8">
    <!-- Filters and Search Section -->
    <div class="mb-6 flex flex-wrap items-center justify-start gap-4">
        <!-- Search Input -->
        <div class="w-full sm:w-64">
            <input 
                type="text" 
                id="searchInput" 
                placeholder="Search products..." 
                class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300"
            >
        </div>
        
        <!-- Category Filter -->
        <div class="w-full sm:w-48">
            <select id="categoryFilter" class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300">
                <option value="">All Categories</option>
                <% categories.forEach(category => { %>
                    <option value="<%= category._id %>" <%= initialCategory === category._id.toString() ? 'selected' : '' %>>
                        <%= category.name %>
                    </option>
                <% }); %>
            </select>
        </div>
        
        <!-- Sort Options -->
        <div class="w-full sm:w-48">
            <select id="sortBy" class="w-full p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300">
                <option value="createdAt:desc">Latest</option>
                <option value="price:asc">Price: Low to High</option>
                <option value="price:desc">Price: High to Low</option>
                <option value="name:asc">Name: A to Z</option>
                <option value="name:desc">Name: Z to A</option>
            </select>
        </div>
        
        <!-- Price Range -->
        <div class="w-full sm:w-64 flex gap-2">
            <input 
                type="number" 
                id="minPrice" 
                placeholder="Min Price" 
                min="0"
                class="w-1/2 p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300"
            >
            <input 
                type="number" 
                id="maxPrice" 
                placeholder="Max Price" 
                min="0"
                class="w-1/2 p-2 border border-gray-300 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300"
            >
        </div>
    </div>

    <!-- Products Grid -->
    <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        <!-- Products will be loaded here -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="mt-8 flex justify-center space-x-2">
        <!-- Pagination will be loaded here -->
    </div>

    <!-- Loading Spinner -->
    <div id="loading" class="hidden">
        <div class="flex justify-center items-center h-32">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-[#8B4513]"></div>
        </div>
    </div>
</div>

<%- include("../partials/footer") %>

<script>
let currentPage = 1;
let currentFilters = {
    search: '',
    category: '<%= initialCategory %>',
    sortBy: 'createdAt',
    order: 'desc',
    minPrice: '',
    maxPrice: '',
    limit: 12
};

// Product card template
function createProductCard(product) {
    const firstVariant = product.variants[0];
    const buttonAction = firstVariant.inCart ? 'remove' : 'add';
    const buttonClass = firstVariant.inCart ? 'remove-from-cart-btn' : 'add-to-cart-btn';
    const buttonText = firstVariant.inCart ? 'Remove from Cart' : 'Add to Cart';
    
    return `
        <div class="bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden group transform hover:scale-[1.02] transition-all duration-300">
            <a href="/product/view/${product._id}" class="block">
                <div class="aspect-w-1 aspect-h-1 overflow-hidden">
                    <img 
                        src="${product.images && product.images.length > 0 ? product.images[0].path : '/images/placeholder.jpg'}" 
                        alt="${product.name}"
                        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500 product-image"
                        data-fallback="/images/placeholder.jpg"
                    >
                </div>
                <div class="p-4">
                    <h3 class="text-sm font-serif mb-1 text-gray-800 group-hover:text-[#8B4513] transition-colors duration-300">${product.name}</h3>
                    <p class="text-gray-600 mb-2 font-serif text-xs">${product.brand || 'No brand'}</p>
                    <div class="flex justify-between items-center mb-2">
                        <div class="flex items-center gap-1">
                            <span class="text-base font-serif text-[#8B4513]">₹${product.discountedPrice || 'N/A'}</span>
                            ${product.offer ? `
                                <span class="text-xs text-gray-500 line-through">₹${product.originalPrice || 'N/A'}</span>
                                <span class="text-xs text-[#8B4513] font-serif ml-1">${product.offer.discount}% OFF</span>
                            ` : ''}
                        </div>
                        <button class="wishlist-toggle text-gray-600 hover:text-red-500 transition-colors" 
                                data-product-id="${product._id}"
                                data-variant-type="${firstVariant.type}"
                                data-in-wishlist="${firstVariant.inWishlist ? 'true' : 'false'}"
                                onclick="handleWishlistToggle(this, event)">
                            <i class="${firstVariant.inWishlist ? 'fas fa-heart text-red-500' : 'far fa-heart'}"></i>
                        </button>
                    </div>
                </div>
            </a>
            <div class="p-4 pt-0">
                <div class="flex flex-col gap-2">
                    <select class="variant-select w-full p-2 text-xs border border-gray-200 text-gray-700 rounded-lg focus:border-[#8B4513] focus:outline-none font-serif hover:border-[#8B4513] transition-colors duration-300" data-product-id="${product._id}">
                        ${product.variants.map(variant => `
                            <option value="${variant.type}" 
                                    data-stock="${variant.stock}" 
                                    data-price="${variant.price}"
                                    data-in-wishlist="${variant.inWishlist ? 'true' : 'false'}"
                                    data-in-cart="${variant.inCart ? 'true' : 'false'}">
                                ${variant.type} - ₹${variant.price}
                            </option>
                        `).join('')}
                    </select>
                    <button 
                        class="${buttonClass} w-full bg-gradient-to-r from-gray-900 to-gray-800 text-white py-2 text-xs uppercase hover:from-gray-800 hover:to-gray-700 transition-all duration-300 font-serif rounded-lg group" 
                        data-product-id="${product._id}"
                        data-action="${buttonAction}"
                        onclick="handleCartAction(this, event)">
                        ${buttonText}
                        <span class="inline-block transform group-hover:translate-x-1 transition-transform duration-300 ml-1">→</span>
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Create pagination buttons
const createPagination = (pagination) => {
    const { currentPage, totalPages } = pagination;
    let html = '';
    
    // Previous button
    html += `
        <button 
            class="px-4 py-2 border border-gray-300 rounded-lg ${!pagination.hasPrevPage ? 'opacity-50 cursor-not-allowed bg-gray-100' : 'hover:bg-[#8B4513] hover:text-white hover:border-[#8B4513] transition-colors duration-300'}" 
            ${!pagination.hasPrevPage ? 'disabled' : ''}
            onclick="${pagination.hasPrevPage ? `changePage(${currentPage - 1})` : ''}"
            title="Previous Page"
        >
            <i class="fas fa-chevron-left"></i>
        </button>
    `;
    
    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        if (i === currentPage) {
            html += `<button class="px-4 py-2 bg-[#8B4513] text-white rounded-lg">${i}</button>`;
        } else if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
            html += `<button class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-[#8B4513] hover:text-white hover:border-[#8B4513] transition-colors duration-300" onclick="changePage(${i})">${i}</button>`;
        } else if (i === currentPage - 2 || i === currentPage + 2) {
            html += `<span class="px-4 py-2">...</span>`;
        }
    }
    
    // Next button
    html += `
        <button 
            class="px-4 py-2 border border-gray-300 rounded-lg ${!pagination.hasNextPage ? 'opacity-50 cursor-not-allowed bg-gray-100' : 'hover:bg-[#8B4513] hover:text-white hover:border-[#8B4513] transition-colors duration-300'}" 
            ${!pagination.hasNextPage ? 'disabled' : ''}
            onclick="${pagination.hasNextPage ? `changePage(${currentPage + 1})` : ''}"
            title="Next Page"
        >
            <i class="fas fa-chevron-right"></i>
        </button>
    `;
    
    return html;
};

// Fetch products with filters
const fetchProducts = async () => {
    try {
        document.getElementById('loading').classList.remove('hidden');
        
        const queryString = new URLSearchParams({
            ...currentFilters,
            page: currentPage
        }).toString();
        
        const response = await fetch(`/shop/products?${queryString}`);
        const data = await response.json();
        
        if (data.success) {
            const productsGrid = document.getElementById('productsGrid');
            const paginationDiv = document.getElementById('pagination');
            
            productsGrid.innerHTML = data.products.map(createProductCard).join('');
            paginationDiv.innerHTML = createPagination(data.pagination);
        }
    } catch (error) {
        console.error('Error fetching products:', error);
    } finally {
        document.getElementById('loading').classList.add('hidden');
    }
};

// Event handlers
const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};

document.getElementById('searchInput').addEventListener('input', debounce((e) => {
    const searchTerm = e.target.value.trim();
    if (searchTerm) {
        // Search in both product name and brand
        currentFilters.search = searchTerm;
    } else {
        currentFilters.search = '';
    }
    currentPage = 1;
    fetchProducts();
}, 300));

document.getElementById('categoryFilter').addEventListener('change', (e) => {
    currentFilters.category = e.target.value;
    currentPage = 1;
    fetchProducts();
});

document.getElementById('sortBy').addEventListener('change', (e) => {
    const [sortBy, order] = e.target.value.split(':');
    currentFilters.sortBy = sortBy;
    currentFilters.order = order;
    currentPage = 1;
    fetchProducts();
});

document.getElementById('minPrice').addEventListener('input', debounce((e) => {
    const minPrice = parseFloat(e.target.value);
    if (!isNaN(minPrice) && minPrice >= 0) {
        currentFilters.minPrice = minPrice;
    } else {
        currentFilters.minPrice = '';
        e.target.value = ''; // Clear invalid input
    }
    currentPage = 1;
    fetchProducts();
}, 500));

document.getElementById('maxPrice').addEventListener('input', debounce((e) => {
    const maxPrice = parseFloat(e.target.value);
    if (!isNaN(maxPrice) && maxPrice >= 0) {
        currentFilters.maxPrice = maxPrice;
    } else {
        currentFilters.maxPrice = '';
        e.target.value = ''; // Clear invalid input
    }
    currentPage = 1;
    fetchProducts();
}, 500));

const changePage = (page) => {
    currentPage = page;
    fetchProducts();
    window.scrollTo({ top: 0, behavior: 'smooth' });
};

// Initial load
fetchProducts();

// Function to initialize cart buttons
function initializeCartButtons() {
    console.log('Initializing cart buttons');
    const cartButtons = document.querySelectorAll('.add-to-cart-btn');
    console.log('Found cart buttons:', cartButtons.length);

    cartButtons.forEach(button => {
        console.log('Setting up button:', button);
        const productId = button.getAttribute('data-product-id');
        const variantSelect = document.querySelector(`.variant-select[data-product-id="${productId}"]`);
        
        // Check initial cart status
        checkCartStatus(productId, variantSelect.value, button);
        
        // Update button state when variant changes
        variantSelect.addEventListener('change', () => {
            console.log('Variant changed:', variantSelect.value);
            checkCartStatus(productId, variantSelect.value, button);
        });
        
        // Add click event listener
        button.addEventListener('click', async function(e) {
            console.log('Cart button clicked');
            e.preventDefault();
            e.stopPropagation();
            
            const action = this.getAttribute('data-action') || 'add';
            const variantType = variantSelect.value;
            const stock = variantSelect.options[variantSelect.selectedIndex].getAttribute('data-stock');
            
            console.log('Action:', action, 'Variant:', variantType, 'Stock:', stock);
            
            // Check if product is in stock (only for add action)
            if (action === 'add' && parseInt(stock) <= 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Out of Stock',
                    text: 'This variant is currently out of stock'
                });
                return;
            }
            
            try {
                // Show loading state
                Swal.fire({
                    title: action === 'add' ? 'Adding to Cart...' : 'Removing from Cart...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                console.log('Making API call to:', action === 'add' ? '/cart/add' : '/cart/remove');
                const response = await fetch(action === 'add' ? '/cart/add' : '/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        variantType
                    })
                });
                
                const data = await response.json();
                console.log('API Response:', data);
                
                if (data.success) {
                    // Close loading state
                    Swal.close();

                    // Update cart count in navbar using the global function
                    if (typeof window.updateCartCount === 'function' && data.cartCount !== undefined) {
                        window.updateCartCount(data.cartCount);
                    }

                    // Update button state
                    updateCartButtonState(this, action === 'add');

                    // Show success message
                    await Swal.fire({
                        icon: 'success',
                        title: action === 'add' ? 'Added to Cart!' : 'Removed from Cart!',
                        text: action === 'add' ? 
                            `${variantType} added to cart successfully` : 
                            `${variantType} removed from cart successfully`,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Cart operation error:', error);
                // Close loading state
                Swal.close();

                // Show error message
                await Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || `Failed to ${action} from cart`
                });
            }
        });
    });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', initializeCartButtons);

// Initialize after products are loaded
const originalFetchProducts = fetchProducts;
fetchProducts = async function() {
    await originalFetchProducts();
    console.log('Products loaded, initializing cart buttons');
    initializeCartButtons();
};

// Add global click handler
document.addEventListener('click', function(e) {
    const button = e.target.closest('.add-to-cart-btn');
    if (button) {
        console.log('Global click handler caught button click');
        e.preventDefault();
        e.stopPropagation();
        button.click(); // Trigger the button's click event
    }
});

// Function to check cart status
async function checkCartStatus(productId, variantType, button) {
    try {
        const response = await fetch(`/cart/check?productId=${productId}&variantType=${variantType}`);
        const data = await response.json();
        if (data.success) {
            updateCartButtonState(button, data.inCart);
        }
    } catch (error) {
        console.error('Error checking cart status:', error);
    }
}

// Function to update button state
function updateCartButtonState(button, inCart) {
    if (inCart) {
        button.innerHTML = 'Remove from Cart <span class="inline-block transform group-hover:translate-x-1 transition-transform duration-300 ml-1">→</span>';
        button.setAttribute('data-action', 'remove');
        button.classList.remove('add-to-cart-btn');
        button.classList.add('remove-from-cart-btn');
    } else {
        button.innerHTML = 'Add to Cart <span class="inline-block transform group-hover:translate-x-1 transition-transform duration-300 ml-1">→</span>';
        button.setAttribute('data-action', 'add');
        button.classList.remove('remove-from-cart-btn');
        button.classList.add('add-to-cart-btn');
    }
}

// Add this function to handle wishlist toggles
async function handleWishlistToggle(button, event) {
    event.preventDefault();
    event.stopPropagation();
    
    const productId = button.getAttribute('data-product-id');
    const variantSelect = document.querySelector(`.variant-select[data-product-id="${productId}"]`);
    const variantType = button.getAttribute('data-variant-type');
    const currentState = button.getAttribute('data-in-wishlist') === 'true';
    
    try {
        // Show loading state
        Swal.fire({
            title: currentState ? 'Removing from wishlist...' : 'Adding to wishlist...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        // Determine the endpoint based on current state
        const endpoint = currentState ? '/wishlist/remove' : '/wishlist/add';
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                productId,
                variantType
            })
        });
        
        // Check if the response is JSON
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            const data = await response.json();
            
            if (data.success) {
                // Close loading state
                Swal.close();

                // Immediately update the UI
                const icon = button.querySelector('i');
                const newState = !currentState;
                
                if (newState) {
                    icon.classList.remove('far');
                    icon.classList.add('fas', 'text-red-500');
                } else {
                    icon.classList.remove('fas', 'text-red-500');
                    icon.classList.add('far');
                }
                
                // Update button data attribute
                button.setAttribute('data-in-wishlist', newState.toString());
                
                // Update variant select option
                const option = variantSelect.options[variantSelect.selectedIndex];
                option.setAttribute('data-in-wishlist', newState.toString());
                
                // Update all variant options for this product
                Array.from(variantSelect.options).forEach(opt => {
                    if (opt.value === variantType) {
                        opt.setAttribute('data-in-wishlist', newState.toString());
                    }
                });
                
                // Update wishlist count in navbar if available
                if (window.updateWishlistCount && data.wishlistCount) {
                    window.updateWishlistCount(data.wishlistCount);
                }
                
                // Show success message
                await Swal.fire({
                    icon: 'success',
                    title: data.message,
                    showConfirmButton: false,
                    timer: 1500
                });
            } else {
                throw new Error(data.message);
            }
        } else {
            // If not JSON, show login prompt
            const result = await Swal.fire({
                icon: 'warning',
                title: 'Login Required',
                text: 'Please login to manage your wishlist',
                showCancelButton: true,
                confirmButtonText: 'Login',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                window.location.href = '/';
            }
        }
    } catch (error) {
        // Close any open dialogs
        Swal.close();

        // Revert the UI state on error
        const icon = button.querySelector('i');
        if (currentState) {
            icon.classList.remove('far');
            icon.classList.add('fas', 'text-red-500');
        } else {
            icon.classList.remove('fas', 'text-red-500');
            icon.classList.add('far');
        }
        button.setAttribute('data-in-wishlist', currentState.toString());
        
        // Show error message
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update wishlist'
        });
    }
}

// Add this function to handle cart actions
async function handleCartAction(button, event) {
    event.preventDefault();
    event.stopPropagation();
    
    console.log('Cart button clicked');
    const productId = button.getAttribute('data-product-id');
    const action = button.getAttribute('data-action') || 'add';
    const variantSelect = document.querySelector(`.variant-select[data-product-id="${productId}"]`);
    const variantType = variantSelect.value;
    const stock = variantSelect.options[variantSelect.selectedIndex].getAttribute('data-stock');
    
    console.log('Action:', action, 'Variant:', variantType, 'Stock:', stock);
    
    // Check if product is in stock (only for add action)
    if (action === 'add' && parseInt(stock) <= 0) {
        Swal.fire({
            icon: 'error',
            title: 'Out of Stock',
            text: 'This variant is currently out of stock'
        });
        return;
    }
    
    try {
        // Show loading state
        Swal.fire({
            title: action === 'add' ? 'Adding to Cart...' : 'Removing from Cart...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        console.log('Making API call to:', action === 'add' ? '/cart/add' : '/cart/remove');
        const response = await fetch(action === 'add' ? '/cart/add' : '/cart/remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId,
                variantType
            })
        });
        
        const data = await response.json();
        console.log('API Response:', data);
        
        if (data.success) {
            // Close loading state
            Swal.close();

            // Update cart count in navbar using the global function
            if (typeof window.updateCartCount === 'function' && data.cartCount !== undefined) {
                window.updateCartCount(data.cartCount);
            }

            // Update button state
            updateCartButtonState(button, action === 'add');

            // Show success message
            await Swal.fire({
                icon: 'success',
                title: action === 'add' ? 'Added to Cart!' : 'Removed from Cart!',
                text: action === 'add' ? 
                    `${variantType} added to cart successfully` : 
                    `${variantType} removed from cart successfully`,
                showConfirmButton: false,
                timer: 1500
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Cart operation error:', error);
        // Close loading state
        Swal.close();

        // Show error message
        await Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || `Failed to ${action} from cart`
        });
    }
}

// Add event listener for variant changes
document.addEventListener('change', function(e) {
    if (e.target.classList.contains('variant-select')) {
        const productId = e.target.getAttribute('data-product-id');
        const button = document.querySelector(`.add-to-cart-btn[data-product-id="${productId}"], .remove-from-cart-btn[data-product-id="${productId}"]`);
        const variantType = e.target.value;
        const inCart = e.target.options[e.target.selectedIndex].getAttribute('data-in-cart') === 'true';
        
        updateCartButtonState(button, inCart);
    }
});
</script>
