<%- include('../partials/navbar') %>

<!-- Add custom styles for luxury theme -->
<style>
    .luxury-gradient {
        background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 100%);
    }
    
    .luxury-card {
        background: white;
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        transition: all 0.3s ease;
    }
    
    .luxury-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    
    .luxury-button {
        background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 100%);
        color: white;
        transition: all 0.3s ease;
    }
    
    .luxury-button:hover {
        background: linear-gradient(135deg, #2c2c2c 0%, #1a1a1a 100%);
        transform: translateY(-1px);
    }
    
    .luxury-input {
        border: 1px solid #e5e7eb;
        transition: all 0.3s ease;
    }
    
    .luxury-input:focus {
        border-color: #1a1a1a;
        box-shadow: 0 0 0 2px rgba(26, 26, 26, 0.1);
    }
    
    .luxury-icon {
        background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 100%);
        color: white;
    }
    
    .modal-content {
        background: white;
        border-radius: 1.25rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        transform: scale(0.95);
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        max-height: 85vh;
        overflow-y: auto;
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE and Edge */
    }

    .modal-content::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
    }

    .modal-content.active {
        transform: scale(1);
        opacity: 1;
    }

    .modal-header {
        background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 100%);
        color: white;
        padding: 1.25rem;
        border-radius: 1.25rem 1.25rem 0 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .modal-header h3 {
        font-family: 'Playfair Display', serif;
        font-size: 1.5rem;
        letter-spacing: 0.5px;
        margin: 0;
    }

    .modal-close {
        color: white;
        transition: all 0.3s ease;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.1);
    }

    .modal-close:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: rotate(90deg);
    }

    .modal-body {
        padding: 1.5rem;
        background: linear-gradient(to bottom, #ffffff, #fafafa);
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        font-family: 'Playfair Display', serif;
        color: #1a1a1a;
        font-size: 0.9rem;
        margin-bottom: 0.4rem;
        display: block;
        font-weight: 500;
    }

    .form-input {
        width: 100%;
        padding: 0.6rem 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.6rem;
        transition: all 0.3s ease;
        background: white;
        font-size: 0.95rem;
    }

    .form-input:focus {
        border-color: #1a1a1a;
        box-shadow: 0 0 0 3px rgba(26, 26, 26, 0.1);
        outline: none;
    }

    .modal-footer {
        padding: 1.25rem;
        background: #fafafa;
        border-top: 1px solid #e5e7eb;
        border-radius: 0 0 1.25rem 1.25rem;
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
        position: sticky;
        bottom: 0;
        z-index: 10;
    }

    .btn {
        padding: 0.6rem 1.25rem;
        border-radius: 0.6rem;
        font-family: 'Playfair Display', serif;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        cursor: pointer;
        font-weight: 500;
    }

    .btn-secondary {
        background: #f3f4f6;
        color: #1a1a1a;
        border: 1px solid #e5e7eb;
    }

    .btn-secondary:hover {
        background: #e5e7eb;
        transform: translateY(-1px);
    }

    .btn-primary {
        background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 100%);
        color: white;
        border: none;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Modal Animation */
    @keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .modal-backdrop {
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
    }

    /* Grid adjustments for more compact layout */
    .grid-cols-2 {
        gap: 0.75rem;
    }

    /* Delete modal specific styles */
    .delete-modal-content {
        max-width: 24rem;
    }

    .delete-modal-body {
        text-align: center;
        padding: 2rem 1.5rem;
    }

    .delete-modal-body p {
        font-size: 1rem;
        line-height: 1.5;
        color: #4b5563;
    }

    /* Enhanced button styles */
    .action-button {
        position: relative;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
    }

    .action-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .action-button:hover::before {
        opacity: 1;
    }

    .edit-button {
        background: linear-gradient(135deg, #2c5282 0%, #1a365d 100%);
        color: white;
    }

    .edit-button:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 4px 12px rgba(44, 82, 130, 0.3);
    }

    .delete-button {
        background: linear-gradient(135deg, #c53030 0%, #9b2c2c 100%);
        color: white;
    }

    .delete-button:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 4px 12px rgba(197, 48, 48, 0.3);
    }

    .action-button i {
        font-size: 1rem;
        transition: transform 0.3s ease;
    }

    .action-button:hover i {
        transform: scale(1.1);
    }

    /* Add ripple effect */
    .action-button::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        pointer-events: none;
        background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);
        background-repeat: no-repeat;
        background-position: 50%;
        transform: scale(10, 10);
        opacity: 0;
        transition: transform .5s, opacity 1s;
    }

    .action-button:active::after {
        transform: scale(0, 0);
        opacity: .3;
        transition: 0s;
    }
</style>

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar -->
        <div class="lg:w-1/4">
            <%- include('../partials/profileSidebar', { currentPage: 'address' }) %>
        </div>

        <!-- Main Content -->
        <div class="lg:w-3/4">
            <div class="mb-8">
                <h1 class="text-3xl font-serif text-gray-800 mb-2">Manage Your Addresses</h1>
                <p class="text-gray-600 font-serif">You can save up to 4 delivery addresses</p>
            </div>

            <div id="alertContainer"></div>

            <!-- Address Cards Container -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach(address => { %>
                        <div class="luxury-card p-6 rounded-lg">
                            <div class="flex justify-between items-start mb-4">
                                <h3 class="font-serif text-xl text-gray-800"><%= address.name %></h3>
                                <div class="flex space-x-3">
                                    <button class="action-button edit-button" 
                                            onclick="openEditModal('<%= address._id %>')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="action-button delete-button" 
                                            onclick="deleteAddress('<%= address._id %>')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="text-gray-700 space-y-2">
                                <p class="font-serif"><%= address.houseName %></p>
                                <p class="font-serif"><%= address.localityStreet %></p>
                                <p class="font-serif"><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                                <p class="mt-3 font-serif">Phone: <%= address.phone %></p>
                                <% if (address.alternatePhone) { %>
                                    <p class="font-serif">Alternate: <%= address.alternatePhone %></p>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                <% } %>

                <% if (!addresses || addresses.length < 4) { %>
                    <div class="luxury-card p-6 rounded-lg border-dashed border-2 border-gray-200 flex items-center justify-center cursor-pointer hover:bg-gray-50 transition-all duration-300" onclick="openAddModal()">
                        <div class="text-center">
                            <div class="w-14 h-14 luxury-icon rounded-full flex items-center justify-center mx-auto mb-4">
                                <i class="fas fa-plus text-xl"></i>
                            </div>
                            <p class="text-gray-700 font-serif text-lg">Add New Address</p>
                        </div>
                    </div>
                <% } %>
            </div>

            <% if (!addresses || addresses.length === 0) { %>
                <div class="luxury-card p-10 rounded-lg text-center">
                    <div class="w-20 h-20 luxury-icon rounded-full flex items-center justify-center mx-auto mb-6">
                        <i class="fas fa-map-marker-alt text-2xl"></i>
                    </div>
                    <h3 class="text-2xl font-serif text-gray-800 mb-3">No Addresses Found</h3>
                    <p class="text-gray-600 mb-6 font-serif">You haven't added any delivery addresses yet.</p>
                    <button onclick="openAddModal()" class="luxury-button px-8 py-3 rounded-lg font-serif">
                        Add Your First Address
                    </button>
                </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Add Address Modal -->
<div id="addAddressModal" class="fixed inset-0 z-50 hidden overflow-auto">
    <div class="fixed inset-0 modal-backdrop"></div>
    <div class="relative flex items-center justify-center min-h-screen p-4">
        <div class="modal-content max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div class="modal-header">
                <div class="flex justify-between items-center">
                    <h3>Add New Address</h3>
                    <button onclick="closeAddModal()" class="modal-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <form id="addAddressForm" action="/address/add" method="POST" class="modal-body" novalidate>
                <div class="space-y-4">
                    <div class="form-group">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text" id="name" name="name" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="houseName" class="form-label">House Name/Number</label>
                        <input type="text" id="houseName" name="houseName" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="localityStreet" class="form-label">Street/Locality</label>
                        <input type="text" id="localityStreet" name="localityStreet" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="form-group">
                            <label for="city" class="form-label">City</label>
                            <input type="text" id="city" name="city" class="form-input" required>
                            <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                        </div>
                        <div class="form-group">
                            <label for="state" class="form-label">State</label>
                            <input type="text" id="state" name="state" class="form-input" required>
                            <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="pincode" class="form-label">Pincode</label>
                        <input type="text" id="pincode" name="pincode" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="phone" class="form-label">Phone Number</label>
                        <input type="tel" id="phone" name="phone" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="alternatePhone" class="form-label">Alternate Phone (Optional)</label>
                        <input type="tel" id="alternatePhone" name="alternatePhone" class="form-input">
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="closeAddModal()" class="btn btn-secondary">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        Save Address
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Address Modal -->
<div id="editAddressModal" class="fixed inset-0 z-50 hidden overflow-auto">
    <div class="fixed inset-0 modal-backdrop"></div>
    <div class="relative flex items-center justify-center min-h-screen p-4">
        <div class="modal-content max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div class="modal-header">
                <div class="flex justify-between items-center">
                    <h3>Edit Address</h3>
                    <button onclick="closeEditModal()" class="modal-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <form id="editAddressForm" action="/address/update" method="POST" class="modal-body" novalidate>
                <input type="hidden" id="editAddressId" name="addressId">
                <div class="space-y-4">
                    <div class="form-group">
                        <label for="editName" class="form-label">Full Name</label>
                        <input type="text" id="editName" name="name" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="editHouseName" class="form-label">House Name/Number</label>
                        <input type="text" id="editHouseName" name="houseName" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="editLocalityStreet" class="form-label">Street/Locality</label>
                        <input type="text" id="editLocalityStreet" name="localityStreet" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="form-group">
                            <label for="editCity" class="form-label">City</label>
                            <input type="text" id="editCity" name="city" class="form-input" required>
                            <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                        </div>
                        <div class="form-group">
                            <label for="editState" class="form-label">State</label>
                            <input type="text" id="editState" name="state" class="form-input" required>
                            <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="editPincode" class="form-label">Pincode</label>
                        <input type="text" id="editPincode" name="pincode" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="editPhone" class="form-label">Phone Number</label>
                        <input type="tel" id="editPhone" name="phone" class="form-input" required>
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                    <div class="form-group">
                        <label for="editAlternatePhone" class="form-label">Alternate Phone (Optional)</label>
                        <input type="tel" id="editAlternatePhone" name="alternatePhone" class="form-input">
                        <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="closeEditModal()" class="btn btn-secondary">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        Update Address
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 z-50 hidden overflow-auto">
    <div class="fixed inset-0 modal-backdrop"></div>
    <div class="relative flex items-center justify-center min-h-screen p-4">
        <div class="modal-content delete-modal-content">
            <div class="modal-header">
                <div class="flex justify-between items-center">
                    <h3>Delete Address</h3>
                    <button onclick="closeDeleteModal()" class="modal-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="delete-modal-body">
                <p>Are you sure you want to delete this address? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button onclick="closeDeleteModal()" class="btn btn-secondary">
                    Cancel
                </button>
                <form id="deleteAddressForm" action="/address/delete" method="POST" class="inline">
                    <input type="hidden" id="deleteAddressId" name="addressId">
                    <button type="submit" class="btn btn-primary bg-red-600 hover:bg-red-700">
                        Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add SweetAlert CDN in the script section at the bottom of the file -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Display flash messages with SweetAlert if they exist
    document.addEventListener('DOMContentLoaded', function() {
        <% if (locals.messages && messages.error) { %>
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: '<%= messages.error %>',
                confirmButtonColor: '#ef4444'
            });
        <% } %>
        
        <% if (locals.messages && messages.success) { %>
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: '<%= messages.success %>',
                confirmButtonColor: '#3b82f6'
            });
        <% } %>
    });
    
    // Add Address Modal Functions
    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.classList.remove('hidden');
        setTimeout(() => {
            modal.querySelector('.modal-content').classList.add('active');
        }, 10);
    }
    
    function hideModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.querySelector('.modal-content').classList.remove('active');
        setTimeout(() => {
            modal.classList.add('hidden');
        }, 300);
    }
    
    function openAddModal() {
        showModal('addAddressModal');
    }
    
    function closeAddModal() {
        hideModal('addAddressModal');
        document.getElementById('addAddressForm').reset();
        document.querySelectorAll('#addAddressForm .error-message').forEach(el => {
            el.textContent = '';
            el.classList.add('hidden');
        });
        document.querySelectorAll('#addAddressForm .form-input').forEach(el => {
            el.classList.remove('border-red-500');
        });
    }
    
    // Add custom validation functions
    function validateName(name) {
        const trimmedName = name.trim();
        if (!trimmedName) {
            return 'Name is required';
        }
        if (trimmedName.length < 3) {
            return 'Name must be at least 3 characters long';
        }
        if (!/^[a-zA-Z\s]+$/.test(trimmedName)) {
            return 'Name can only contain letters and spaces';
        }
        return '';
    }

    function validateAddress(address) {
        const trimmedAddress = address.trim();
        if (!trimmedAddress) {
            return 'Address is required';
        }
        if (trimmedAddress.length < 5) {
            return 'Address must be at least 5 characters long';
        }
        return '';
    }

    function validateCityState(value) {
        const trimmedValue = value.trim();
        if (!trimmedValue) {
            return 'This field is required';
        }
        if (trimmedValue.length < 2) {
            return 'Must be at least 2 characters long';
        }
        if (!/^[a-zA-Z\s]+$/.test(trimmedValue)) {
            return 'Can only contain letters and spaces';
        }
        return '';
    }

    function validatePhone(phone) {
        const trimmedPhone = phone.trim();
        if (!trimmedPhone) {
            return 'Phone number is required';
        }
        if (!/^\d{10}$/.test(trimmedPhone)) {
            return 'Phone number must be 10 digits';
        }
        return '';
    }

    function validatePincode(pincode) {
        const trimmedPincode = pincode.trim();
        if (!trimmedPincode) {
            return 'Pincode is required';
        }
        if (!/^\d{6}$/.test(trimmedPincode)) {
            return 'Pincode must be 6 digits';
        }
        return '';
    }

    function validateAlternatePhone(phone) {
        if (!phone) return ''; // Optional field
        const trimmedPhone = phone.trim();
        if (trimmedPhone && !/^\d{10}$/.test(trimmedPhone)) {
            return 'Alternate phone number must be 10 digits';
        }
        return '';
    }

    function showError(inputElement, message) {
        const errorDiv = inputElement.nextElementSibling;
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        inputElement.classList.add('border-red-500');
    }

    function clearError(inputElement) {
        const errorDiv = inputElement.nextElementSibling;
        errorDiv.textContent = '';
        errorDiv.classList.add('hidden');
        inputElement.classList.remove('border-red-500');
    }

    // Add input event listeners for real-time validation
    function addInputValidation(formId) {
        const form = document.getElementById(formId);
        const inputs = form.querySelectorAll('input[required]');
        
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                let error = '';
                
                switch(this.name) {
                    case 'name':
                        error = validateName(this.value);
                        break;
                    case 'houseName':
                    case 'localityStreet':
                        error = validateAddress(this.value);
                        break;
                    case 'city':
                    case 'state':
                        error = validateCityState(this.value);
                        break;
                    case 'phone':
                        error = validatePhone(this.value);
                        break;
                    case 'pincode':
                        error = validatePincode(this.value);
                        break;
                    case 'alternatePhone':
                        error = validateAlternatePhone(this.value);
                        break;
                }
                
                if (error) {
                    showError(this, error);
                } else {
                    clearError(this);
                }
            });
        });
    }

    // Initialize validation for both forms
    document.addEventListener('DOMContentLoaded', function() {
        addInputValidation('addAddressForm');
        addInputValidation('editAddressForm');
    });

    // Update form submission handlers
    document.getElementById('addAddressForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('name').value;
        const houseName = document.getElementById('houseName').value;
        const localityStreet = document.getElementById('localityStreet').value;
        const city = document.getElementById('city').value;
        const state = document.getElementById('state').value;
        const pincode = document.getElementById('pincode').value;
        const phone = document.getElementById('phone').value;
        const alternatePhone = document.getElementById('alternatePhone').value;
        
        let hasError = false;
        
        // Validate all fields
        const nameError = validateName(name);
        if (nameError) {
            showError(document.getElementById('name'), nameError);
            hasError = true;
        }
        
        const houseNameError = validateAddress(houseName);
        if (houseNameError) {
            showError(document.getElementById('houseName'), houseNameError);
            hasError = true;
        }
        
        const localityError = validateAddress(localityStreet);
        if (localityError) {
            showError(document.getElementById('localityStreet'), localityError);
            hasError = true;
        }
        
        const cityError = validateCityState(city);
        if (cityError) {
            showError(document.getElementById('city'), cityError);
            hasError = true;
        }
        
        const stateError = validateCityState(state);
        if (stateError) {
            showError(document.getElementById('state'), stateError);
            hasError = true;
        }
        
        const pincodeError = validatePincode(pincode);
        if (pincodeError) {
            showError(document.getElementById('pincode'), pincodeError);
            hasError = true;
        }
        
        const phoneError = validatePhone(phone);
        if (phoneError) {
            showError(document.getElementById('phone'), phoneError);
            hasError = true;
        }
        
        const alternatePhoneError = validateAlternatePhone(alternatePhone);
        if (alternatePhoneError) {
            showError(document.getElementById('alternatePhone'), alternatePhoneError);
            hasError = true;
        }
        
        if (!hasError) {
            this.submit();
        }
    });

    document.getElementById('editAddressForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('editName').value.trim();
        const houseName = document.getElementById('editHouseName').value.trim();
        const localityStreet = document.getElementById('editLocalityStreet').value.trim();
        const city = document.getElementById('editCity').value.trim();
        const state = document.getElementById('editState').value.trim();
        const pincode = document.getElementById('editPincode').value.trim();
        const phone = document.getElementById('editPhone').value.trim();
        const alternatePhone = document.getElementById('editAlternatePhone').value.trim();
        
        let hasError = false;
        
        // Validate all fields
        const nameError = validateName(name);
        if (nameError) {
            showError(document.getElementById('editName'), nameError);
            hasError = true;
        }
        
        const houseNameError = validateAddress(houseName);
        if (houseNameError) {
            showError(document.getElementById('editHouseName'), houseNameError);
            hasError = true;
        }
        
        const localityError = validateAddress(localityStreet);
        if (localityError) {
            showError(document.getElementById('editLocalityStreet'), localityError);
            hasError = true;
        }
        
        const cityError = validateCityState(city);
        if (cityError) {
            showError(document.getElementById('editCity'), cityError);
            hasError = true;
        }
        
        const stateError = validateCityState(state);
        if (stateError) {
            showError(document.getElementById('editState'), stateError);
            hasError = true;
        }
        
        const pincodeError = validatePincode(pincode);
        if (pincodeError) {
            showError(document.getElementById('editPincode'), pincodeError);
            hasError = true;
        }
        
        const phoneError = validatePhone(phone);
        if (phoneError) {
            showError(document.getElementById('editPhone'), phoneError);
            hasError = true;
        }
        
        const alternatePhoneError = validateAlternatePhone(alternatePhone);
        if (alternatePhoneError) {
            showError(document.getElementById('editAlternatePhone'), alternatePhoneError);
            hasError = true;
        }
        
        if (!hasError) {
        this.submit();
        }
    });
    
    // Edit Address Modal Functions
    function openEditModal(addressId) {
        fetch(`/address/${addressId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(address => {
                document.getElementById('editAddressId').value = address._id;
                document.getElementById('editName').value = address.name;
                document.getElementById('editHouseName').value = address.houseName;
                document.getElementById('editLocalityStreet').value = address.localityStreet;
                document.getElementById('editCity').value = address.city;
                document.getElementById('editState').value = address.state;
                document.getElementById('editPincode').value = address.pincode;
                document.getElementById('editPhone').value = address.phone;
                document.getElementById('editAlternatePhone').value = address.alternatePhone || '';
                
                // Clear any existing errors
                document.querySelectorAll('#editAddressForm .error-message').forEach(el => {
                    el.textContent = '';
                    el.classList.add('hidden');
                });
                document.querySelectorAll('#editAddressForm .form-input').forEach(el => {
                    el.classList.remove('border-red-500');
                });
                
                showModal('editAddressModal');
            })
            .catch(error => {
                console.error('Error fetching address:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error loading address details. Please try again.',
                    confirmButtonColor: '#ef4444'
                });
            });
    }
    
    function closeEditModal() {
        hideModal('editAddressModal');
        document.getElementById('editAddressForm').reset();
        // Clear all error messages and styles
        document.querySelectorAll('#editAddressForm .error-message').forEach(el => {
            el.textContent = '';
            el.classList.add('hidden');
        });
        document.querySelectorAll('#editAddressForm .form-input').forEach(el => {
            el.classList.remove('border-red-500');
        });
    }
    
    // Delete Address Functions
    function deleteAddress(addressId) {
        document.getElementById('deleteAddressId').value = addressId;
        showModal('deleteModal');
    }

    function closeDeleteModal() {
        hideModal('deleteModal');
    }
</script>

<%- include('../partials/footer') %>
