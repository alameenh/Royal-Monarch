<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Admin Dashboard for Royal Monarch" />
    <title>Dashboard - Royal Monarch</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-zinc-900 text-white min-h-screen">
    <%- include("../partials/sidebar") %>

    <div class="lg:ml-64 transition-all" id="main-content">
        <header class="flex items-center justify-between mb-8 p-4 lg:p-8 border-b border-gray-700">
            <h1 class="text-2xl font-semibold text-gray-200">Dashboard Overview</h1>
            <div class="text-gray-400"><%= new Date().toLocaleString() %></div>
        </header>

        <!-- Statistics Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 px-4 lg:px-8">
            <!-- Total Users Card -->
            <div class="bg-zinc-800 p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-gray-400">Total Users</h3>
                    <i class="material-icons text-emerald-500 text-lg md:text-xl lg:text-2xl group-hover:rotate-12 transition-transform">person</i>
                </div>
                <div class="flex items-baseline">
                    <p class="text-3xl font-bold text-gray-200"><%= userCount || 0 %></p>
                </div>
            </div>

            <!-- Total Products Card -->
            <div class="bg-zinc-800 p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-gray-400">Total Products</h3>
                    <i class="material-icons text-emerald-500 text-lg md:text-xl lg:text-2xl group-hover:rotate-12 transition-transform">directions_car</i>
                </div>
                <div class="flex items-baseline">
                    <p class="text-3xl font-bold text-gray-200"><%= productCount || 0 %></p>
                </div>
            </div>

            <!-- Total Orders Card -->
            <div class="bg-zinc-800 p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-gray-400">Total Orders</h3>
                    <i class="material-icons text-emerald-500 text-lg md:text-xl lg:text-2xl group-hover:rotate-12 transition-transform">shopping_cart</i>
                </div>
                <div class="flex items-baseline">
                    <p class="text-3xl font-bold text-gray-200"><%= orderCount || 0 %></p>
                </div>
            </div>

            <!-- Total Revenue Card -->
            <div class="bg-zinc-800 p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-gray-400">Total Revenue</h3>
                    <i class="material-icons text-emerald-500 text-lg md:text-xl lg:text-2xl group-hover:rotate-12 transition-transform">payments</i>
                </div>
                <div class="flex items-baseline">
                    <p class="text-3xl font-bold text-gray-200">â‚¹<%= totalRevenue.toLocaleString() || 0 %></p>
                </div>
            </div>
        </div>

        <!-- Sales Chart -->
        <div class="bg-zinc-800 rounded-lg shadow-lg p-6 mb-8 mx-4 lg:mx-8">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                <div>
                    <h2 class="text-xl font-semibold text-gray-200 mb-2">Sales Overview</h2>
                    <div class="flex space-x-4">
                        <div class="flex items-center">
                            <span class="inline-block w-3 h-3 rounded-full bg-emerald-500 mr-2"></span>
                            <span class="text-sm text-gray-400">Revenue</span>
                        </div>
                        <div class="flex items-center">
                            <span class="inline-block w-3 h-3 rounded-full bg-blue-500 mr-2"></span>
                            <span class="text-sm text-gray-400">Orders</span>
                        </div>
                    </div>
                </div>
                
                <div class="flex flex-wrap gap-2">
                    <!-- Time Range Selector -->
                    <div class="flex items-center gap-2">
                        <span class="text-sm text-gray-400">Time Range:</span>
                        <div class="flex bg-zinc-700 rounded-lg p-1">
                            <button class="time-range-btn px-3 py-1 rounded-md transition-all" data-range="day">Today</button>
                            <button class="time-range-btn px-3 py-1 rounded-md transition-all" data-range="week">Week</button>
                            <button class="time-range-btn px-3 py-1 rounded-md transition-all" data-range="month">Month</button>
                            <button class="time-range-btn px-3 py-1 rounded-md transition-all" data-range="custom">Custom</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Date Range Picker -->
            <div id="dateRangePicker" class="hidden mb-4">
                <div class="flex gap-2 bg-zinc-700 p-3 rounded-lg shadow-lg">
                    <input type="text" id="startDate" class="bg-zinc-800 text-white px-4 py-2 rounded-md border border-zinc-700" placeholder="Start Date">
                    <input type="text" id="endDate" class="bg-zinc-800 text-white px-4 py-2 rounded-md border border-zinc-700" placeholder="End Date">
                    <button id="applyDateRange" class="bg-emerald-600 text-white px-4 py-2 rounded-md hover:bg-emerald-700 transition-colors">Apply</button>
                </div>
            </div>

            <div id="chartContainer" class="h-[400px]">
                <canvas id="salesChart"></canvas>
            </div>
        </div>
        
        <!-- Top Selling Products, Categories, and Brands -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 mx-4 lg:mx-8">
            <!-- Top Products -->
            <div class="bg-zinc-800 rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-200 mb-4">Top Products</h2>
                <div class="overflow-y-auto max-h-80 scrollbar-hide">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="text-left text-gray-400 text-sm font-medium">Product</th>
                                <th class="text-right text-gray-400 text-sm font-medium">Sold</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (topProducts && topProducts.length > 0) { %>
                                <% topProducts.forEach(product => { %>
                                    <tr class="border-b border-gray-700">
                                        <td class="py-3 text-white">
                                            <%= product.name %>
                                            <div class="text-xs text-gray-400"><%= product.brand %></div>
                                        </td>
                                        <td class="py-3 text-right text-white"><%= product.soldcount %></td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="2" class="py-3 text-center text-gray-400">No data available</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Top Categories -->
            <div class="bg-zinc-800 rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-200 mb-4">Top Categories</h2>
                <div class="overflow-y-auto max-h-80 scrollbar-hide">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="text-left text-gray-400 text-sm font-medium">Category</th>
                                <th class="text-right text-gray-400 text-sm font-medium">Sold</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (topCategories && topCategories.length > 0) { %>
                                <% topCategories.forEach(category => { %>
                                    <tr class="border-b border-gray-700">
                                        <td class="py-3 text-white"><%= category.name || category._id %></td>
                                        <td class="py-3 text-right text-white"><%= category.count %></td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="2" class="py-3 text-center text-gray-400">No data available</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Top Brands -->
            <div class="bg-zinc-800 rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-200 mb-4">Top Brands</h2>
                <div class="overflow-y-auto max-h-80 scrollbar-hide">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="text-left text-gray-400 text-sm font-medium">Brand</th>
                                <th class="text-right text-gray-400 text-sm font-medium">Sold</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (topBrands && topBrands.length > 0) { %>
                                <% topBrands.forEach(brand => { %>
                                    <tr class="border-b border-gray-700">
                                        <td class="py-3 text-white"><%= brand._id %></td>
                                        <td class="py-3 text-right text-white"><%= brand.count %></td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="2" class="py-3 text-center text-gray-400">No data available</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Hide scrollbar but keep functionality */
        .scrollbar-hide::-webkit-scrollbar {
            display: none;
        }
        
        .scrollbar-hide {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
    </style>

    <script>
        // Initialize date picker with better defaults
        let startDatePicker = flatpickr("#startDate", {
            dateFormat: "Y-m-d",
            defaultDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
            maxDate: new Date(),
            onChange: function(selectedDates, dateStr) {
                // Validate date range when start date changes
                validateDateRange();
            }
        });
        
        let endDatePicker = flatpickr("#endDate", {
            dateFormat: "Y-m-d",
            defaultDate: new Date(),
            maxDate: new Date(),
            onChange: function(selectedDates, dateStr) {
                // Validate date range when end date changes
                validateDateRange();
            }
        });
        
        // Function to validate date range
        function validateDateRange() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            if (startDate && endDate) {
                const start = new Date(startDate);
                const end = new Date(endDate);
                
                const applyButton = document.getElementById('applyDateRange');
                
                if (start > end) {
                    applyButton.disabled = true;
                    applyButton.classList.add('opacity-50', 'cursor-not-allowed');
                    applyButton.title = 'Start date cannot be after end date';
                } else {
                    applyButton.disabled = false;
                    applyButton.classList.remove('opacity-50', 'cursor-not-allowed');
                    applyButton.title = '';
                }
            }
        }

        // Chart initialization
        let salesChart;
        let ctx;
        
        function initializeChart() {
            // Get the chart context
            const chartCanvas = document.getElementById('salesChart');
            if (!chartCanvas) {
                console.error('Chart canvas not found');
                return false;
            }
            
            ctx = chartCanvas.getContext('2d');
            if (!ctx) {
                console.error('Could not get 2D context from canvas');
                return false;
            }
            
            return true;
        }

        function createChartConfig(data) {
            if (!ctx) {
                if (!initializeChart()) {
                    return null;
                }
            }
            
            const revenueGradient = ctx.createLinearGradient(0, 0, 0, 400);
            revenueGradient.addColorStop(0, 'rgba(16, 185, 129, 0.4)');
            revenueGradient.addColorStop(1, 'rgba(16, 185, 129, 0)');

            const ordersGradient = ctx.createLinearGradient(0, 0, 0, 400);
            ordersGradient.addColorStop(0, 'rgba(59, 130, 246, 0.4)');
            ordersGradient.addColorStop(1, 'rgba(59, 130, 246, 0)');

            return {
                type: 'line',
                data: {
                    labels: data.map(item => item._id),
                    datasets: [
                        {
                            label: 'Revenue (â‚¹)',
                            data: data.map(item => item.revenue),
                            backgroundColor: revenueGradient,
                            borderColor: '#10b981',
                            borderWidth: 2,
                            pointBackgroundColor: '#10b981',
                            pointBorderColor: '#fff',
                            pointRadius: 4,
                            pointHoverRadius: 6,
                            tension: 0.4,
                            fill: true,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Orders',
                            data: data.map(item => item.count),
                            backgroundColor: ordersGradient,
                            borderColor: '#3b82f6',
                            borderWidth: 2,
                            pointBackgroundColor: '#3b82f6',
                            pointBorderColor: '#fff',
                            pointRadius: 4,
                            pointHoverRadius: 6,
                            tension: 0.4,
                            fill: true,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#e5e7eb',
                                font: {
                                    size: 12
                                },
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(24, 24, 27, 0.9)',
                            titleColor: '#e5e7eb',
                            bodyColor: '#e5e7eb',
                            borderColor: 'rgba(255, 255, 255, 0.1)',
                            borderWidth: 1,
                            padding: 12,
                            cornerRadius: 8,
                            titleFont: {
                                size: 14,
                                weight: 'bold'
                            },
                            bodyFont: {
                                size: 13
                            },
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.datasetIndex === 0) {
                                        label += 'â‚¹' + context.parsed.y.toLocaleString();
                                    } else {
                                        label += context.parsed.y;
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.05)'
                            },
                            ticks: {
                                color: '#e5e7eb',
                                maxRotation: 45,
                                minRotation: 0,
                                font: {
                                    size: 11
                                }
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.05)'
                            },
                            border: {
                                dash: [4, 4]
                            },
                            ticks: {
                                color: '#e5e7eb',
                                font: {
                                    size: 11
                                },
                                callback: function(value) {
                                    return 'â‚¹' + value.toLocaleString();
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false
                            },
                            border: {
                                dash: [4, 4]
                            },
                            ticks: {
                                color: '#e5e7eb',
                                font: {
                                    size: 11
                                }
                            }
                        }
                    },
                    animations: {
                        tension: {
                            duration: 1000,
                            easing: 'linear',
                            from: 0.8,
                            to: 0.4,
                            loop: false
                        }
                    }
                }
            };
        }

        function initChart(data) {
            try {
                if (salesChart) {
                    salesChart.destroy();
                    salesChart = null;
                }
                
                // Reset and get new canvas
                const chartContainer = document.getElementById('chartContainer');
                chartContainer.innerHTML = '<canvas id="salesChart"></canvas>';
                
                if (!initializeChart()) {
                    throw new Error('Failed to initialize chart');
                }
                
                const config = createChartConfig(data);
                if (!config) {
                    throw new Error('Failed to create chart configuration');
                }
                
                salesChart = new Chart(ctx, config);
                return true;
            } catch (error) {
                console.error('Error initializing chart:', error);
                const chartContainer = document.getElementById('chartContainer');
                chartContainer.innerHTML = 
                    '<div class="flex items-center justify-center h-full">' +
                    '<div class="text-red-500">Error initializing chart: ' + error.message + '</div></div>';
                return false;
            }
        }

        // Function to load chart data from API
        async function loadChartData(filter, startDate = null, endDate = null) {
            try {
                // Disable all filter buttons
                document.querySelectorAll('.time-range-btn').forEach(btn => {
                    btn.disabled = true;
                    btn.classList.add('opacity-50');
                });
                
                // Disable apply button if in custom mode
                const applyButton = document.getElementById('applyDateRange');
                if (applyButton) {
                    applyButton.disabled = true;
                    applyButton.classList.add('opacity-50');
                }
                
                // Show loading indicator
                const chartContainer = document.getElementById('chartContainer');
                chartContainer.innerHTML = '<div class="flex items-center justify-center h-full"><div class="text-emerald-500">Loading chart data...</div></div>';
                
                // Build URL
                let url = `/admin/dashboard/chart-data?filter=${filter}`;
                if (filter === 'custom' && startDate && endDate) {
                    url += `&startDate=${startDate}&endDate=${endDate}`;
                }
                console.log('Fetching data from:', url);
                
                // Fetch data
                const response = await fetch(url);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.details || 'Failed to fetch chart data');
                }
                
                const data = await response.json();
                console.log('Received chart data:', data);
                
                // Display data
                if (!data || data.length === 0) {
                    chartContainer.innerHTML = '<div class="flex items-center justify-center h-full"><div class="text-gray-400">No data available for selected time range</div></div>';
                } else {
                    initChart(data);
                }
                
                return true;
            } catch (error) {
                console.error('Error loading chart data:', error);
                document.getElementById('chartContainer').innerHTML = 
                    '<div class="flex items-center justify-center h-full">' +
                    '<div class="text-red-500">Error loading chart data: ' + error.message + '</div></div>';
                
                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Failed to fetch chart data. Please try again.',
                    icon: 'error',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
                
                return false;
            } finally {
                // Re-enable all filter buttons
                document.querySelectorAll('.time-range-btn').forEach(btn => {
                    btn.disabled = false;
                    btn.classList.remove('opacity-50');
                });
                
                // Re-enable apply button if in custom mode
                const applyButton = document.getElementById('applyDateRange');
                if (applyButton) {
                    const startDate = document.getElementById('startDate')?.value;
                    const endDate = document.getElementById('endDate')?.value;
                    
                    if (startDate && endDate) {
                        const start = new Date(startDate);
                        const end = new Date(endDate);
                        
                        if (start <= end) {
                            applyButton.disabled = false;
                            applyButton.classList.remove('opacity-50');
                        }
                    }
                }
            }
        }

        // Function to fetch chart data based on date range
        async function fetchChartData() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            if (!startDate || !endDate) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please select both start and end dates',
                    icon: 'error',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
                return;
            }
            
            const start = new Date(startDate);
            const end = new Date(endDate);
            
            if (start > end) {
                Swal.fire({
                    title: 'Error',
                    text: 'Start date cannot be after end date',
                    icon: 'error',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
                return;
            }
            
            // Load chart data with custom filter
            await loadChartData('custom', startDate, endDate);
        }

        // Initialize with default data
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // Try to initialize chart with server data
                try {
                    initializeChart();
                    
                    // Parse the data safely using JSON.parse and handle EJS encoding
                    const orderDataStr = '<%- orderData %>'.replace(/&quot;/g, '"').replace(/&#34;/g, '"');
                    const chartData = JSON.parse(orderDataStr);
                    console.log('Initial chart data:', chartData);
                    
                    if (chartData && chartData.length > 0) {
                        initChart(chartData);
                    } else {
                        document.getElementById('chartContainer').innerHTML = 
                            '<div class="flex items-center justify-center h-full">' +
                            '<div class="text-gray-400">No data available</div></div>';
                    }
                } catch (error) {
                    console.error('Error parsing initial chart data:', error);
                    document.getElementById('chartContainer').innerHTML = 
                        '<div class="flex items-center justify-center h-full">' +
                        '<div class="text-red-500">Error loading chart data: ' + error.message + '</div></div>';
                }
                
                // Setup event handlers
                setupEventHandlers();
                
                // Set initial active button
                document.querySelector('.time-range-btn[data-range="week"]').classList.add('bg-emerald-600', 'text-white');
            } catch (error) {
                console.error('Error during initialization:', error);
            }
        });

        // Event Handlers
        function setupEventHandlers() {
            // Time Range Buttons
            document.querySelectorAll('.time-range-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    try {
                        // Update active button style
                        document.querySelectorAll('.time-range-btn').forEach(b => {
                            b.classList.remove('bg-emerald-600', 'text-white');
                            b.disabled = false;
                        });
                        btn.classList.add('bg-emerald-600', 'text-white');
                        
                        const dateRangePicker = document.getElementById('dateRangePicker');
                        if (btn.dataset.range === 'custom') {
                            // Show date picker for custom range
                            dateRangePicker.classList.remove('hidden');
                            validateDateRange();
                            return; // Don't fetch data yet, wait for Apply button
                        } else {
                            // Hide date picker for predefined ranges
                            dateRangePicker.classList.add('hidden');
                            
                            // Load data for selected range
                            await loadChartData(btn.dataset.range);
                        }
                    } catch (error) {
                        console.error('Error handling filter button click:', error);
                    }
                });
            });
            
            // Apply custom date range
            document.getElementById('applyDateRange').addEventListener('click', fetchChartData);
        }

        // Auto-refresh data every 5 minutes
        setInterval(async () => {
            try {
                const activeRangeBtn = document.querySelector('.time-range-btn.bg-emerald-600');
                if (!activeRangeBtn) return;
                
                const filter = activeRangeBtn.dataset.range;
                if (filter === 'custom') {
                    const startDate = document.getElementById('startDate')?.value;
                    const endDate = document.getElementById('endDate')?.value;
                    
                    if (startDate && endDate) {
                        await loadChartData('custom', startDate, endDate);
                    }
                } else {
                    await loadChartData(filter);
                }
                
                // Update last updated time
                document.querySelector('header .text-gray-400').textContent = new Date().toLocaleString();
            } catch (error) {
                console.error('Error refreshing data:', error);
            }
        }, 300000); // 5 minutes
    </script>
</body>
</html>