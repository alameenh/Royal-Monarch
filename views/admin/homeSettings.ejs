<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Settings</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* Custom styling for product cards */
        .product-card {
            transition: all 0.2s ease-in-out;
        }
        
        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .product-card.border-emerald-500 {
            box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.5);
        }
        
        /* Custom scrollbar for product grid */
        .overflow-y-auto::-webkit-scrollbar {
            width: 6px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-track {
            background: #27272a;
            border-radius: 10px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb {
            background: #3f3f46;
            border-radius: 10px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
            background: #52525b;
        }
    </style>
</head>
<body class="bg-zinc-900 text-white min-h-screen">
    <%- include("../partials/sidebar") %>

    <div class="lg:ml-64 transition-all" id="main-content">
        <header class="flex items-center justify-between mb-8 p-4 lg:p-8 border-b border-gray-700">
            <h1 class="text-2xl font-semibold text-gray-200">Home Settings</h1>
            <button onclick="saveAllChanges()" 
                class="px-4 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700">
                Save All Changes
            </button>
        </header>

        <main class="p-4 lg:p-8">
            <!-- Hero Image Card -->
            <div class="bg-zinc-800 rounded-lg p-6 mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-200">Hero Image</h2>
                    <div class="text-sm text-gray-400">
                        Recommended size: 1920x1080px
                    </div>
                </div>
                <div class="flex items-center gap-6">
                    <div class="w-96 h-54 bg-zinc-700 rounded-lg overflow-hidden border-2 border-dashed border-zinc-600">
                        <img id="heroPreview" src="<%= settings?.heroImage || '/images/placeholder.jpg' %>" 
                            class="w-full h-full object-cover" alt="Hero Image">
                    </div>
                    <div class="flex flex-col gap-3">
                        <button onclick="openImageUpload('hero')" 
                            class="px-4 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700">
                            Upload New Image
                        </button>
                        <button onclick="removeImage('hero')" 
                            class="px-4 py-2 bg-zinc-700 text-white rounded-md hover:bg-zinc-600">
                            Remove Image
                        </button>
                    </div>
                </div>
            </div>

            <!-- Category Images Cards -->
            <div class="bg-zinc-800 rounded-lg p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-200">Category Images</h2>
                    <div class="text-sm text-gray-400">
                        <div>Left/Right: 387x450px (0.86:1)</div>
                        <div>Top/Bottom: 387x215px (1.8:1)</div>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <% const categories = ['left', 'right', 'top', 'bottom']; %>
                    <% categories.forEach(category => { %>
                        <div class="bg-zinc-700 p-4 rounded-lg border border-zinc-600">
                            <h3 class="font-semibold mb-3 text-gray-200 capitalize"><%= category %> Category</h3>
                            <div class="w-full <%= category === 'left' || category === 'right' ? 'h-[450px]' : 'h-[215px]' %> bg-zinc-600 rounded-lg overflow-hidden mb-3 border-2 border-dashed border-zinc-500">
                                <img id="<%= category %>Preview" 
                                    src="<%= settings?.[`${category}CategoryImage`] || '/images/placeholder.jpg' %>" 
                                    class="w-full h-full object-cover" 
                                    alt="<%= category %> Category">
                            </div>
                            <div class="flex flex-col gap-3">
                                <div class="flex gap-2">
                                    <select id="<%= category %>Category" class="flex-1 p-2 bg-zinc-800 text-white rounded-md border border-zinc-600 focus:border-emerald-500 focus:outline-none">
                                        <option value="">Select a category</option>
                                        <% allCategories.forEach(cat => { %>
                                            <option value="<%= cat._id %>" 
                                                <%= settings?.[`${category}Category`]?._id?.toString() === cat._id.toString() ? 'selected' : '' %>>
                                                <%= cat.name %>
                                            </option>
                                        <% }); %>
                                    </select>
                                    <button onclick="updateCategoryAssignment('<%= category %>')" 
                                        class="px-4 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700 flex items-center justify-center">
                                        <i class="fas fa-save mr-2"></i>
                                        Update
                                    </button>
                                </div>
                                <div class="flex gap-3">
                                    <button onclick="openImageUpload('<%= category %>')" 
                                        class="flex-1 px-4 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700">
                                        Upload
                                    </button>
                                    <button onclick="removeImage('<%= category %>')" 
                                        class="flex-1 px-4 py-2 bg-zinc-600 text-white rounded-md hover:bg-zinc-500">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>

            <!-- Handpicked Products Section -->
            <div class="bg-zinc-800 rounded-lg p-6 mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-200">Handpicked Products</h2>
                    <div class="text-sm text-gray-400">
                        Select up to 3 products to feature on the home page
                    </div>
                </div>
                <div class="bg-zinc-700 p-4 rounded-lg">
                    <!-- Selected Products Cards -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <% 
                        const positions = [
                            { position: 'left', product: settings?.handpickedProduct1 },
                            { position: 'middle', product: settings?.handpickedProduct2 },
                            { position: 'right', product: settings?.handpickedProduct3 }
                        ];
                        
                        positions.forEach(({ position, product }) => { 
                            // Check if product exists and has valid data
                            const productExists = product && product._id;
                        %>
                            <div class="product-slot bg-zinc-800 rounded-lg overflow-hidden">
                                <% if (productExists) { %>
                                    <div class="relative group" data-product-id="<%= product._id %>" data-position="<%= position %>">
                                        <img src="<%= product.imagePath || '/images/placeholder.jpg' %>" alt="<%= product.name %>" class="w-full h-48 object-cover">
                                        <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-lg flex items-center justify-center">
                                            <button onclick="removeProduct(this)" class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600">
                                                <i class="fas fa-trash"></i> Remove
                                            </button>
                                        </div>
                                        <div class="mt-2 p-3">
                                            <h3 class="text-sm font-medium text-gray-200"><%= product.name %></h3>
                                            <p class="text-xs text-gray-400"><%= product.brand || 'No brand' %></p>
                                            <p class="text-xs text-gray-500"><%= position.charAt(0).toUpperCase() + position.slice(1) %> Position</p>
                                        </div>
                                        <input type="hidden" name="handpickedProducts[]" value="<%= product._id %>">
                                    </div>
                                <% } else { %>
                                    <div class="empty-slot flex flex-col items-center justify-center h-full p-4 text-center cursor-pointer hover:bg-zinc-700 transition-colors" 
                                         data-position="<%= position %>" 
                                         onclick="openProductSelection(this)">
                                        <i class="fas fa-plus-circle text-4xl text-zinc-600 mb-2"></i>
                                        <p class="text-zinc-500 text-sm">Click to add product (<%= position %> position)</p>
                                    </div>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>
                    
                    <div class="mt-4 text-sm text-gray-400">
                        <p>Selected products will appear in the "Handpicked For You" section on the home page.</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Product Selection Modal -->
    <div id="productSelectionModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-zinc-800 rounded-lg p-6 w-full max-w-md relative">
                <button onclick="closeProductSelection()" class="absolute top-4 right-4 text-gray-400 hover:text-white z-10">
                    <i class="fas fa-times text-xl"></i>
                </button>
                
                <h3 class="text-xl font-semibold text-gray-200 mb-4">Select a Product</h3>
                
                <div class="mb-4">
                    <select id="productSelect" class="w-full p-2 bg-zinc-700 text-white rounded-md border border-zinc-600 focus:border-emerald-500 focus:outline-none">
                        <option value="">Select a product</option>
                        <% products.forEach(product => { %>
                            <option value="<%= product._id %>" 
                                    data-name="<%= product.name %>"
                                    data-brand="<%= product.brand || 'No brand' %>"
                                    data-image="<%= product.images && product.images.length > 0 ? product.images[0].path : '/images/placeholder.jpg' %>">
                                <%= product.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                
                <div class="flex justify-end gap-3">
                    <button onclick="closeProductSelection()" class="px-4 py-2 bg-zinc-700 text-white rounded-md hover:bg-zinc-600">
                        Cancel
                    </button>
                    <button onclick="addSelectedProduct(document.getElementById('productSelect'))" class="px-4 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700">
                        Add Product
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Upload Modal -->
    <div id="imageUploadModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-zinc-800 rounded-lg p-6 w-full max-w-[90vw] relative">
                <!-- Close button at top right -->
                <button onclick="closeImageUpload()" class="absolute top-4 right-4 text-gray-400 hover:text-white z-10">
                    <i class="fas fa-times text-xl"></i>
                </button>

                <div class="flex flex-col gap-4">
                    <!-- Header with dimension info -->
                    <div class="flex justify-between items-center">
                        <h3 class="text-xl font-semibold text-gray-200">Upload and Crop Image</h3>
                        <div class="text-sm text-gray-400 bg-zinc-700 px-3 py-1 rounded">
                            <span id="dimensionInfo"></span>
                        </div>
                    </div>

                    <!-- Main content area -->
                    <div class="flex flex-col lg:flex-row gap-6">
                        <!-- Cropper container -->
                        <div class="flex-1">
                            <div class="mb-4">
                                <input type="file" id="imageInput" accept="image/*" class="hidden">
                                <div id="cropperContainer" class="hidden aspect-square w-[600px] mx-auto relative bg-zinc-900 rounded-lg overflow-hidden">
                                    <img id="cropperImage" src="" alt="Image to crop" class="w-full h-full object-contain">
                                    <div class="absolute bottom-4 left-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded text-sm">
                                        Drag to move | Scroll to zoom | Double-click to reset
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Controls sidebar -->
                        <div class="w-full lg:w-64 flex flex-col gap-4">
                            <div class="bg-zinc-700 p-4 rounded-lg">
                                <h4 class="text-sm font-semibold text-gray-200 mb-3">Crop Controls</h4>
                                <div class="flex flex-col gap-2">
                                    <button onclick="resetCrop()" 
                                        class="w-full px-4 py-2 bg-zinc-600 text-white rounded-md hover:bg-zinc-500 flex items-center justify-center gap-2">
                                        <i class="fas fa-sync-alt"></i>
                                        Reset Crop
                                    </button>
                                    <div class="flex gap-2">
                                        <button onclick="rotateLeft()" 
                                            class="flex-1 px-4 py-2 bg-zinc-600 text-white rounded-md hover:bg-zinc-500 flex items-center justify-center gap-2">
                                            <i class="fas fa-undo"></i>
                                            Left
                                        </button>
                                        <button onclick="rotateRight()" 
                                            class="flex-1 px-4 py-2 bg-zinc-600 text-white rounded-md hover:bg-zinc-500 flex items-center justify-center gap-2">
                                            <i class="fas fa-redo"></i>
                                            Right
                                        </button>
                                    </div>
                                    <div class="flex gap-2">
                                        <button onclick="zoomIn()" 
                                            class="flex-1 px-4 py-2 bg-zinc-600 text-white rounded-md hover:bg-zinc-500 flex items-center justify-center gap-2">
                                            <i class="fas fa-search-plus"></i>
                                            Zoom In
                                        </button>
                                        <button onclick="zoomOut()" 
                                            class="flex-1 px-4 py-2 bg-zinc-600 text-white rounded-md hover:bg-zinc-500 flex items-center justify-center gap-2">
                                            <i class="fas fa-search-minus"></i>
                                            Zoom Out
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Preview -->
                            <div class="bg-zinc-700 p-4 rounded-lg">
                                <h4 class="text-sm font-semibold text-gray-200 mb-3">Preview</h4>
                                <div class="bg-zinc-800 rounded overflow-hidden">
                                    <div class="img-preview" id="previewContainer"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Fixed action buttons at bottom -->
                    <div class="sticky bottom-0 bg-zinc-800 pt-4 mt-4 border-t border-zinc-700">
                        <div class="flex justify-end gap-4">
                            <button onclick="closeImageUpload()" 
                                class="px-6 py-2 border border-zinc-600 text-white rounded-md hover:bg-zinc-700">
                                Cancel
                            </button>
                            <button onclick="uploadImage()" 
                                class="px-6 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700">
                                Upload Image
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script>
        let currentCategory = '';
        let cropper = null;
        let pendingChanges = {};

        function updateDimensionInfo() {
            const dimensionInfo = document.getElementById('dimensionInfo');
            if (currentCategory === 'hero') {
                dimensionInfo.textContent = '1920x1080px (16:9)';
            } else if (currentCategory === 'left' || currentCategory === 'right') {
                dimensionInfo.textContent = '387x450px (0.86:1)';
            } else {
                dimensionInfo.textContent = '387x215px (1.8:1)';
            }
        }

        function resetCrop() {
            if (cropper) {
                cropper.reset();
            }
        }

        function rotateLeft() {
            if (cropper) {
                cropper.rotate(-90);
            }
        }

        function rotateRight() {
            if (cropper) {
                cropper.rotate(90);
            }
        }

        function zoomIn() {
            if (cropper) {
                cropper.zoom(0.1);
            }
        }

        function zoomOut() {
            if (cropper) {
                cropper.zoom(-0.1);
            }
        }

        function openImageUpload(category) {
            currentCategory = category;
            updateDimensionInfo();
            const modal = document.getElementById('imageUploadModal');
            modal.classList.remove('hidden');
            document.getElementById('imageInput').click();
        }

        function closeImageUpload() {
            const modal = document.getElementById('imageUploadModal');
            modal.classList.add('hidden');
            document.getElementById('cropperContainer').classList.add('hidden');
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }

        // Close modal when clicking outside
        document.getElementById('imageUploadModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeImageUpload();
            }
        });

        function removeImage(category) {
            try {
                // Show loading state
                Swal.fire({
                    title: 'Removing...',
                    text: 'Please wait while we remove the image',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    background: '#18181B',
                    color: '#FFFFFF'
                });

                // Determine the endpoint based on category
                let endpoint;
                if (category === 'hero') {
                    endpoint = '/admin/home-settings/hero';
                } else {
                    endpoint = '/admin/home-settings/category';
                }

                // Create FormData and append the category
                const formData = new FormData();
                formData.append('category', category);
                formData.append('removeImage', 'true');

                // Send request to remove the image
                fetch(endpoint, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                // Update the preview image
                const previewId = category === 'hero' ? 'heroPreview' : `${category}Preview`;
                document.getElementById(previewId).src = '/images/placeholder.jpg';
                
                // Add to pending changes
                pendingChanges[category] = '';
                
                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Image Removed',
                    text: 'The image has been removed successfully',
                    background: '#18181B',
                    color: '#FFFFFF'
                        });
                    } else {
                        throw new Error(data.message || 'Failed to remove image');
                    }
                })
                .catch(error => {
                    console.error('Error removing image:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to remove image',
                        background: '#18181B',
                        color: '#FFFFFF'
                    });
                });
            } catch (error) {
                console.error('Error removing image:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to remove image',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
            }
        }

        // Function to save all changes
        async function saveAllChanges() {
            try {
                // Show loading state
                Swal.fire({
                    title: 'Saving Changes...',
                    text: 'Please wait while we save your changes',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    background: '#18181B',
                    color: '#FFFFFF'
                });
                
                // Save hero image if changed
                if (pendingChanges.hero !== undefined) {
                    await fetch('/admin/home-settings/hero', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            imageData: pendingChanges.hero,
                            removeImage: pendingChanges.hero === ''
                        })
                    });
                }

                // Save category images and assignments if changed
                const categoryChanges = {};
                ['left', 'right', 'top', 'bottom'].forEach(category => {
                    const categorySelect = document.getElementById(`${category}Category`);
                    const selectedCategoryId = categorySelect.value;
                    
                    if (pendingChanges[category] !== undefined || selectedCategoryId) {
                        categoryChanges[category] = {
                            imageData: pendingChanges[category],
                            removeImage: pendingChanges[category] === '',
                            categoryId: selectedCategoryId
                        };
                    }
                });

                if (Object.keys(categoryChanges).length > 0) {
                    await fetch('/admin/home-settings/category', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ categoryImages: categoryChanges })
                    });
                }

                // Get selected product IDs
                const selectedProductIds = Array.from(document.querySelectorAll('input[name="handpickedProducts[]"]'))
                    .map(input => input.value)
                    .filter(id => id); // Filter out any null/undefined values
                
                // Save handpicked products
                if (selectedProductIds.length > 0) {
                    const response = await fetch('/admin/home-settings/handpicked-products', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productIds: selectedProductIds })
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to update handpicked products');
                    }
                }

                // Clear pending changes
                pendingChanges = {};
                
                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'All changes saved successfully',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
            } catch (error) {
                console.error('Error saving changes:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to save changes',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
            }
        }

        document.getElementById('imageInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // Check file size (max 50MB)
                if (file.size > 50 * 1024 * 1024) {
                    Swal.fire({
                        icon: 'error',
                        title: 'File too large',
                        text: 'Please select an image smaller than 50MB',
                        background: '#18181B',
                        color: '#FFFFFF'
                    });
                    return;
                }

                // Check file type
                const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
                if (!validTypes.includes(file.type)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid file type',
                        text: 'Please select a JPEG, PNG, or WebP image',
                        background: '#18181B',
                        color: '#FFFFFF'
                    });
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const image = document.getElementById('cropperImage');
                    image.src = e.target.result;
                    document.getElementById('cropperContainer').classList.remove('hidden');
                    
                    // Set preview container height based on category
                    const previewContainer = document.getElementById('previewContainer');
                    if (currentCategory === 'hero') {
                        previewContainer.style.height = '550px';
                    } else if (currentCategory === 'left' || currentCategory === 'right') {
                        previewContainer.style.height = '450px';
                    } else {
                        previewContainer.style.height = '215px';
                    }
                    
                    if (cropper) {
                        cropper.destroy();
                    }

                    // Set aspect ratio and dimensions based on image type
                    let aspectRatio, width, height;
                    if (currentCategory === 'hero') {
                        aspectRatio = 16/9; // 1920/1080
                        width = 1920;
                        height = 1080;
                    } else if (currentCategory === 'left' || currentCategory === 'right') {
                        aspectRatio = 8/9; // 4:4.5 ratio for left/right categories
                        width = 800;
                        height = 900;
                    } else {
                        aspectRatio = 1.8; // 387/215
                        width = 387;
                        height = 215;
                    }
                    
                    cropper = new Cropper(image, {
                        aspectRatio: aspectRatio,
                        viewMode: 2,
                        autoCropArea: 0.8,
                        responsive: true,
                        restore: false,
                        minContainerWidth: 600,
                        minContainerHeight: 600,
                        background: false,
                        guides: true,
                        center: true,
                        highlight: true,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                        zoomable: true,
                        zoomOnTouch: true,
                        zoomOnWheel: true,
                        wheelZoomRatio: 0.1,
                        dragMode: 'move',
                        initialAspectRatio: aspectRatio,
                        preview: '.img-preview',
                        ready: function() {
                            // Set initial crop box size
                            const containerData = cropper.getContainerData();
                            const cropBoxData = cropper.getCropBoxData();
                            const ratio = width / height;
                            
                            if (containerData.width / containerData.height > ratio) {
                                cropBoxData.height = containerData.height;
                                cropBoxData.width = containerData.height * ratio;
                            } else {
                                cropBoxData.width = containerData.width;
                                cropBoxData.height = containerData.width / ratio;
                            }
                            
                            cropper.setCropBoxData(cropBoxData);
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        async function uploadImage() {
            if (!cropper) return;

            try {
                // Get the cropped canvas and convert to blob
                const canvas = cropper.getCroppedCanvas();
                const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', 1.0));
                
                // Create FormData and append the image
                const formData = new FormData();
                formData.append('image', blob, 'image.jpg');

                // Show loading state
                Swal.fire({
                    title: 'Uploading...',
                    text: 'Please wait while we process your image',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    background: '#18181B',
                    color: '#FFFFFF'
                });

                // Determine the endpoint based on category
                let endpoint;
                if (currentCategory === 'hero') {
                    endpoint = '/admin/home-settings/hero';
                } else {
                    endpoint = '/admin/home-settings/category';
                    formData.append('category', currentCategory);
                }
                
                const response = await fetch(endpoint, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Failed to upload image');
                }

                const data = await response.json();
                
                if (data.success) {
                    // Update preview
                    const previewId = currentCategory === 'hero' ? 'heroPreview' : `${currentCategory}Preview`;
                    document.getElementById(previewId).src = data.imageUrl || data.categoryImages[currentCategory];
                    
                    // Add to pending changes
                    pendingChanges[currentCategory] = data.imageUrl || data.categoryImages[currentCategory];
                    
                    // Close the modal
                    closeImageUpload();
                    
                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Image uploaded successfully',
                        background: '#18181B',
                        color: '#FFFFFF'
                    });
                } else {
                    throw new Error(data.message || 'Failed to upload image');
                }
            } catch (error) {
                console.error('Error uploading image:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to upload image',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
            }
        }

        async function updateCategoryAssignment(position) {
            try {
                const categorySelect = document.getElementById(`${position}Category`);
                const categoryId = categorySelect.value;

                // Show loading state
                Swal.fire({
                    title: 'Updating...',
                    text: 'Please wait while we update the category assignment',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    background: '#18181B',
                    color: '#FFFFFF'
                });

                const response = await fetch('/admin/home-settings/category/assignment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ position, categoryId })
                });

                const data = await response.json();

                if (data.success) {
                    // Update the UI to reflect the change
                    const categorySelect = document.getElementById(`${position}Category`);
                    const selectedOption = categorySelect.options[categorySelect.selectedIndex];
                    const categoryName = selectedOption ? selectedOption.text : 'Select a category';
                    
                    // Update the preview text
                    const previewText = document.querySelector(`#${position}Preview`).nextElementSibling;
                    if (previewText) {
                        previewText.textContent = categoryName;
                    }

                    // Update the category assignments in the UI
                    if (data.categoryAssignments) {
                        Object.entries(data.categoryAssignments).forEach(([pos, assignment]) => {
                            const select = document.getElementById(`${pos}Category`);
                            if (select) {
                                select.value = assignment?.categoryId || '';
                            }
                        });
                    }

                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Category assignment updated successfully',
                        background: '#18181B',
                        color: '#FFFFFF'
                    });
                } else {
                    throw new Error(data.message || 'Failed to update category assignment');
                }
            } catch (error) {
                console.error('Error updating category assignment:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update category assignment',
                    background: '#18181B',
                    color: '#FFFFFF'
                });
            }
        }

        // Product Selection Modal Functions
        function openProductSelection(emptySlot) {
            const modal = document.getElementById('productSelectionModal');
            modal.dataset.targetPosition = emptySlot.dataset.position;
            modal.classList.remove('hidden');
        }

        function closeProductSelection() {
            document.getElementById('productSelectionModal').classList.add('hidden');
            document.getElementById('productSelect').value = '';
        }

        // Close modal when clicking outside
        document.getElementById('productSelectionModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeProductSelection();
            }
        });

        // Close modal with escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && !document.getElementById('productSelectionModal').classList.contains('hidden')) {
                closeProductSelection();
            }
        });

        async function addSelectedProduct(selectElement) {
            if (!selectElement) {
                console.error('Select element not found');
                return;
            }

            const productId = selectElement.value;
            if (!productId) {
                Swal.fire({
                    icon: 'warning',
                    title: 'No Product Selected',
                    text: 'Please select a product first.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            const selectedOption = selectElement.options[selectElement.selectedIndex];
            const productData = {
                _id: productId,
                name: selectedOption.dataset.name,
                brand: selectedOption.dataset.brand,
                imagePath: selectedOption.dataset.image
            };

            const modal = document.getElementById('productSelectionModal');
            const position = modal.dataset.targetPosition;
            
            if (!position) {
                console.error('No position specified');
                return;
            }

            try {
                const response = await fetch('/admin/home-settings/handpicked-product', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        position
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    const productCard = createProductCard(productData, position);
                    const emptySlot = document.querySelector(`.empty-slot[data-position="${position}"]`);
                    if (emptySlot) {
                        emptySlot.parentElement.innerHTML = productCard;
                    }
                    closeProductSelection();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Product Added',
                        text: `Product added to ${position} position successfully!`,
                        timer: 2000,
                        showConfirmButton: false
                    });
                } else {
                    throw new Error(data.message || 'Failed to add product');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to add product. Please try again.'
                });
            }
        }

        function createProductCard(product, position) {
            return `
                <div class="relative group" data-product-id="${product._id}" data-position="${position}">
                    <img src="${product.imagePath || '/images/placeholder.jpg'}" 
                         alt="${product.name}" 
                         class="w-full h-48 object-cover">
                    <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-lg flex items-center justify-center">
                        <button onclick="removeProduct(this)" class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600">
                            <i class="fas fa-trash"></i> Remove
                        </button>
                    </div>
                    <div class="mt-2 p-3">
                        <h3 class="text-sm font-medium text-gray-200">${product.name}</h3>
                        <p class="text-xs text-gray-400">${product.brand || 'No brand'}</p>
                        <p class="text-xs text-gray-500">${position.charAt(0).toUpperCase() + position.slice(1)} Position</p>
                    </div>
                    <input type="hidden" name="handpickedProducts[]" value="${product._id}">
                </div>
            `;
        }

        async function removeProduct(button) {
            const productCard = button.closest('[data-product-id]');
            const productId = productCard.dataset.productId;
            const position = productCard.dataset.position;

            const result = await Swal.fire({
                title: 'Remove Product',
                text: 'Are you sure you want to remove this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/home-settings/handpicked-product', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            productId: null,
                            position
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        const emptySlot = `
                            <div class="empty-slot flex flex-col items-center justify-center h-full p-4 text-center cursor-pointer hover:bg-zinc-700 transition-colors" 
                                 data-position="${position}" 
                                 onclick="openProductSelection(this)">
                                <i class="fas fa-plus-circle text-4xl text-zinc-600 mb-2"></i>
                                <p class="text-zinc-500 text-sm">Click to add product (${position} position)</p>
                            </div>
                        `;
                        productCard.parentElement.innerHTML = emptySlot;
                        
                        Swal.fire({
                            icon: 'success',
                            title: 'Product Removed',
                            text: `Product removed from ${position} position successfully!`,
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        throw new Error(data.message || 'Failed to remove product');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to remove product. Please try again.'
                    });
                }
            }
        }
    </script>
</body>
</html>
